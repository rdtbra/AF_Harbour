/*
 * $Id: QGraphicsScene.qth 16683 2011-04-27 10:00:24Z vszakats $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject  = yes
Inherit  = QObject
Type     =
New      =
</CLASS>

<CODE>
#include <QtGui/QGraphicsScene>
#include <QtGui/QPalette>

/*
 * QGraphicsScene ( QObject * parent = 0 )
 * QGraphicsScene ( const QRectF & sceneRect, QObject * parent = 0 )
 * QGraphicsScene ( qreal x, qreal y, qreal width, qreal height, QObject * parent = 0 )
 * virtual ~QGraphicsScene ()
 */
HB_FUNC( QT_QGRAPHICSSCENE )
{
   if( hb_pcount() >= 4 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) && HB_ISNUM( 4 ) )
   {
      __HB_RETPTRGC__( new QGraphicsScene( hb_parnd( 1 ), hb_parnd( 2 ), hb_parnd( 3 ), hb_parnd( 4 ), ( HB_ISOBJECT( 5 ) ? hbqt_par_QObject( 5 ) : 0 ) ) );
   }
   else if( hb_pcount() >= 1 && HB_ISOBJECT( 1 ) )
   {
      HBQT_GC_T * p = ( HBQT_GC_T * ) hbqt_par_ptr( 1 );
      if( p->type == HBQT_TYPE_QRectF )
      {
         __HB_RETPTRGC__( new QGraphicsScene( *hbqt_par_QRectF( 1 ), ( HB_ISOBJECT( 2 ) ? hbqt_par_QObject( 2 ) : 0 ) ) );
      }
      else
      {
         __HB_RETPTRGC__( new QGraphicsScene( hbqt_par_QObject( 1 ) ) );
      }
   }
   else
   {
      __HB_RETPTRGC__( new QGraphicsScene() );
   }
}
</CODE>

<ENUMS>
enum ItemIndexMethod { BspTreeIndex, NoIndex }
enum SceneLayer { ItemLayer, BackgroundLayer, ForegroundLayer, AllLayers }
flags SceneLayers
</ENUMS>

<PROTOS>
QGraphicsWidget * activeWindow () const
QGraphicsEllipseItem * addEllipse ( const QRectF & rect, const QPen & pen = QPen(), const QBrush & brush = QBrush() )
QGraphicsEllipseItem * addEllipse ( qreal x, qreal y, qreal w, qreal h, const QPen & pen = QPen(), const QBrush & brush = QBrush() )
void addItem ( QGraphicsItem * item )   [*D=1*]
QGraphicsLineItem * addLine ( const QLineF & line, const QPen & pen = QPen() )
QGraphicsLineItem * addLine ( qreal x1, qreal y1, qreal x2, qreal y2, const QPen & pen = QPen() )
QGraphicsPathItem * addPath ( const QPainterPath & path, const QPen & pen = QPen(), const QBrush & brush = QBrush() )
QGraphicsPixmapItem * addPixmap ( const QPixmap & pixmap )
QGraphicsPolygonItem * addPolygon ( const QPolygonF & polygon, const QPen & pen = QPen(), const QBrush & brush = QBrush() )
QGraphicsRectItem * addRect ( const QRectF & rect, const QPen & pen = QPen(), const QBrush & brush = QBrush() )
QGraphicsRectItem * addRect ( qreal x, qreal y, qreal w, qreal h, const QPen & pen = QPen(), const QBrush & brush = QBrush() )
QGraphicsSimpleTextItem * addSimpleText ( const QString & text, const QFont & font = QFont() )
QGraphicsTextItem * addText ( const QString & text, const QFont & font = QFont() )
QGraphicsProxyWidget * addWidget ( QWidget * widget, Qt::WindowFlags wFlags = 0 )
QBrush backgroundBrush () const
int bspTreeDepth () const
void clearFocus ()
QList<QGraphicsItem *> collidingItems ( const QGraphicsItem * item, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape ) const
QGraphicsItemGroup * createItemGroup ( const QList<QGraphicsItem *> & items )
void destroyItemGroup ( QGraphicsItemGroup * group )
QGraphicsItem * focusItem () const
QFont font () const
QBrush foregroundBrush () const
bool hasFocus () const
qreal height () const
// virtual QVariant inputMethodQuery ( Qt::InputMethodQuery query ) const
void invalidate ( qreal x, qreal y, qreal w, qreal h, SceneLayers layers = AllLayers )
bool isSortCacheEnabled () const
QGraphicsItem * itemAt ( const QPointF & position ) const
QGraphicsItem * itemAt ( qreal x, qreal y ) const
ItemIndexMethod itemIndexMethod () const
QList<QGraphicsItem *> items () const
QList<QGraphicsItem *> items ( const QPointF & pos ) const
QList<QGraphicsItem *> items ( qreal x, qreal y, qreal w, qreal h, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape ) const
QList<QGraphicsItem *> items ( const QRectF & rectangle, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape ) const
QList<QGraphicsItem *> items ( const QPolygonF & polygon, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape ) const
QList<QGraphicsItem *> items ( const QPainterPath & path, Qt::ItemSelectionMode mode = Qt::IntersectsItemShape ) const
QRectF itemsBoundingRect () const
QGraphicsItem * mouseGrabberItem () const
QPalette palette () const
void removeItem ( QGraphicsItem * item )
void render ( QPainter * painter, const QRectF & target = QRectF(), const QRectF & source = QRectF(), Qt::AspectRatioMode aspectRatioMode = Qt::KeepAspectRatio )
QRectF sceneRect () const
QList<QGraphicsItem *> selectedItems () const
QPainterPath selectionArea () const
void setActiveWindow ( QGraphicsWidget * widget )
void setBackgroundBrush ( const QBrush & brush )
void setBspTreeDepth ( int depth )
void setFocus ( Qt::FocusReason focusReason = Qt::OtherFocusReason )
void setFocusItem ( QGraphicsItem * item, Qt::FocusReason focusReason = Qt::OtherFocusReason )
void setFont ( const QFont & font )
void setForegroundBrush ( const QBrush & brush )
void setItemIndexMethod ( ItemIndexMethod method )
void setPalette ( const QPalette & palette )
void setSceneRect ( const QRectF & rect )
void setSceneRect ( qreal x, qreal y, qreal w, qreal h )
void setSelectionArea ( const QPainterPath & path )
void setSelectionArea ( const QPainterPath & path, Qt::ItemSelectionMode mode )
void setSortCacheEnabled ( bool enabled )
void setStickyFocus ( bool enabled )
void setStyle ( QStyle * style )
bool stickyFocus () const
QStyle * style () const
void update ( qreal x, qreal y, qreal w, qreal h )
QList<QGraphicsView *> views () const
qreal width () const
</PROTOS>

<SLOTS>
void advance ()
void clear ()
void clearSelection ()
void invalidate ( const QRectF & rect = QRectF(), SceneLayers layers = AllLayers )
void update ( const QRectF & rect = QRectF() )
</SLOTS>

<SIGNALS>
void changed ( const QList<QRectF> & region )
void sceneRectChanged ( const QRectF & rect )
void selectionChanged ()
</SIGNALS>

<VARIABLES>
</VARIABLES>
