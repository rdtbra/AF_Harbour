/*
 * $Id: QSplitter.qth 15742 2010-11-04 04:19:36Z vszakats $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherit  = QFrame
New      = pParent
</CLASS>

<CODE>
#include <QtGui/QSplitter>


/*
 * QSplitter ( QWidget * parent = 0 )
 * QSplitter ( Qt::Orientation orientation, QWidget * parent = 0 )
 * ~QSplitter ()
 */
HB_FUNC( QT_QSPLITTER )
{
   if( hb_pcount() >= 1 && HB_ISNUM( 1 ) )
      __HB_RETPTRGC__( new QSplitter( ( Qt::Orientation ) hb_parni( 1 ), hbqt_par_QWidget( 2 ) ) );
   else
      __HB_RETPTRGC__( new QSplitter( hbqt_par_QWidget( 1 ) ) );
}
</CODE>

<PROTOS>
void addWidget ( QWidget * widget )
bool childrenCollapsible () const
int count () const
void getRange ( int index, int * min, int * max ) const
#
# The call below need QSplitterHandle class constructed firts
# Will review later
#
//QSplitterHandle * handle ( int index ) const
#
int handleWidth () const
int indexOf ( QWidget * widget ) const
void insertWidget ( int index, QWidget * widget )
bool isCollapsible ( int index ) const
bool opaqueResize () const
Qt::Orientation orientation () const
void refresh ()
bool restoreState ( const QByteArray & state )
QByteArray saveState () const
void setChildrenCollapsible ( bool )
void setCollapsible ( int index, bool collapse )
void setHandleWidth ( int )
void setOpaqueResize ( bool opaque = true )
void setOrientation ( Qt::Orientation )
void setSizes ( const QList<int> & list )
void setStretchFactor ( int index, int stretch )
QList<int> sizes () const
QWidget * widget ( int index ) const
</PROTOS>

<SIGNALS>
void splitterMoved ( int pos, int index )
</SIGNALS>
