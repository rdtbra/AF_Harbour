/*
 * $Id: QPixmap.qth 16683 2011-04-27 10:00:24Z vszakats $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject  = no
Inherits = QPaintDevice
Type     = PlainObject
New      =
</CLASS>


<CODE>
#include <QtGui/QPixmap>
#include <QtGui/QBitmap>

/*
 * QPixmap ()
 * QPixmap ( int width, int height )
 * QPixmap ( const QString & fileName, const char * format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor )
 * QPixmap ( const char * const[] xpm )
 * QPixmap ( const QPixmap & pixmap )
 * QPixmap ( const QSize & size )
 * ~QPixmap ()
 */
HB_FUNC( QT_QPIXMAP )
{
   if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      __HB_RETPTRGC__( new QPixmap( hbqt_par_QString( 1 ), ( const char * ) 0, Qt::AutoColor ) );
   }
   else if( hb_pcount() == 1 && HB_ISOBJECT( 1 ) )
   {
      HBQT_GC_T * q = ( HBQT_GC_T * ) hbqt_par_ptr( 1 );
      if( q )
      {
         if( q->type == HBQT_TYPE_QPixmap )
         {
            __HB_RETPTRGC__( new QPixmap( *hbqt_par_QPixmap( 1 ) ) );
         }
         if( q->type == HBQT_TYPE_QSize )
         {
            __HB_RETPTRGC__( new QPixmap( *hbqt_par_QSize( 1 ) ) );
         }
      }
      else
      {
         __HB_RETPTRGC__( new QPixmap( *hbqt_par_QPixmap( 1 ) ) );
      }
   }
   else if( hb_pcount() == 2 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( new QPixmap( hb_parni( 1 ), hb_parni( 2 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QPixmap() );
   }
}
</CODE>

<ENUMS>
enum HBitmapFormat { NoAlpha, PremultipliedAlpha, Alpha }
enum ShareMode { ImplicitlyShared, ExplicitlyShared }
</ENUMS>

<PROTOS>
QPixmap alphaChannel () const
qint64 cacheKey () const
#
// QRgb * clut () const
#
QPixmap copy ( const QRect & rectangle = QRect() ) const
QPixmap copy ( int x, int y, int width, int height ) const
QBitmap createHeuristicMask ( bool clipTight = true ) const
QBitmap createMaskFromColor ( const QColor & maskColor, Qt::MaskMode mode ) const
QBitmap createMaskFromColor ( const QColor & maskColor ) const
int depth () const
void detach ()
void fill ( const QColor & color = Qt::white )
void fill ( const QWidget * widget, const QPoint & offset )
void fill ( const QWidget * widget, int x, int y )
// Qt::HANDLE handle () const
bool hasAlpha () const
bool hasAlphaChannel () const
int height () const
bool isNull () const
bool isQBitmap () const
bool load ( const QString & fileName, const char * format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor )
// bool loadFromData ( const uchar * data, uint len, const char * format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor )
bool loadFromData ( const QByteArray & data, const char * format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor )
QBitmap mask () const

// int numCols () const
// const uchar * qwsBits () const
// int qwsBytesPerLine () const

QRect rect () const
bool save ( const QString & fileName, const char * format = 0, int quality = -1 ) const
bool save ( QIODevice * device, const char * format = 0, int quality = -1 ) const
QPixmap scaled ( int width, int height, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio, Qt::TransformationMode transformMode = Qt::FastTransformation ) const
QPixmap scaled ( const QSize & size, Qt::AspectRatioMode aspectRatioMode = Qt::IgnoreAspectRatio, Qt::TransformationMode transformMode = Qt::FastTransformation ) const
QPixmap scaledToHeight ( int height, Qt::TransformationMode mode = Qt::FastTransformation ) const
QPixmap scaledToWidth ( int width, Qt::TransformationMode mode = Qt::FastTransformation ) const
void setAlphaChannel ( const QPixmap & alphaChannel )
void setMask ( const QBitmap & mask )
QSize size () const
QImage toImage () const
// CGImageRef toMacCGImageRef () const
//HBITMAP toWinHBITMAP ( HBitmapFormat format = NoAlpha ) const

QPixmap transformed ( const QTransform & transform, Qt::TransformationMode mode = Qt::FastTransformation ) const
QPixmap transformed ( const QMatrix & matrix, Qt::TransformationMode mode = Qt::FastTransformation ) const

int width () const
int defaultDepth ()
QPixmap fromImage ( const QImage & image, Qt::ImageConversionFlags flags = Qt::AutoColor )

//QPixmap fromMacCGImageRef ( CGImageRef image )
//QPixmap fromWinHBITMAP ( HBITMAP bitmap, HBitmapFormat format = NoAlpha )
//QPixmap fromX11Pixmap ( Qt::HANDLE pixmap, ShareMode mode = ImplicitlyShared )

QPixmap grabWidget ( QWidget * widget, const QRect & rectangle )
QPixmap grabWidget ( QWidget * widget, int x = 0, int y = 0, int width = -1, int height = -1 )

//QPixmap grabWindow ( WId window, int x = 0, int y = 0, int width = -1, int height = -1 )
QTransform trueMatrix ( const QTransform & matrix, int width, int height )
QMatrix trueMatrix ( const QMatrix & m, int w, int h )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
