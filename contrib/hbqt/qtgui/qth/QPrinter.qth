/*
 * $Id: QPrinter.qth 16442 2011-03-09 08:10:56Z vszakats $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject  = no
Inherits = QPaintDevice
Type     = 
New      = 
</CLASS>

<CODE>
#include <QtGui/QPrinter>


/*
 * QPrinter ( PrinterMode mode = ScreenResolution )
 * QPrinter ( const QPrinterInfo & printer, PrinterMode mode = ScreenResolution )
 * ~QPrinter ()
 */
HB_FUNC( QT_QPRINTER )
{
   if( hb_pcount() >= 1 && HB_ISOBJECT( 1 ) )
   {
      __HB_RETPTRGC__( new QPrinter( *hbqt_par_QPrinterInfo( 1 ), ( QPrinter::PrinterMode ) ( HB_ISNUM( 2 ) ? hb_parni( 2 ) : QPrinter::ScreenResolution ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QPrinter() );
   }
}
</CODE>

<ENUMS>
enum ColorMode { Color, GrayScale }
enum DuplexMode { DuplexNone, DuplexAuto, DuplexLongSide, DuplexShortSide }
enum Orientation { Portrait, Landscape }
enum OutputFormat { NativeFormat, PdfFormat, PostScriptFormat }
enum PageOrder { FirstPageFirst, LastPageFirst }
enum PaperSize { A0, A1, A2, A3, ..., Custom }
enum PaperSource { Auto, Cassette, Envelope, EnvelopeManual, ..., SmallFormat }
enum PrintRange { AllPages, Selection, PageRange }
enum PrinterMode { ScreenResolution, PrinterResolution, HighResolution }
enum PrinterState { Idle, Active, Aborted, Error }
enum Unit { Millimeter, Point, Inch, Pica, ..., DevicePixel }
</ENUMS>

<PROTOS>
bool abort ()
bool collateCopies () const
ColorMode colorMode () const
QString creator () const
QString docName () const
bool doubleSidedPrinting () const
DuplexMode duplex () const
bool fontEmbeddingEnabled () const
int fromPage () const
bool fullPage () const
void getPageMargins ( qreal * left, qreal * top, qreal * right, qreal * bottom, Unit unit ) const
bool isValid () const
bool newPage ()
int numCopies () const
Orientation orientation () const
QString outputFileName () const
OutputFormat outputFormat () const
PageOrder pageOrder () const
QRect pageRect () const
QRectF pageRect ( Unit unit ) const
virtual QPaintEngine * paintEngine () const
QRect paperRect () const
QRectF paperRect ( Unit unit ) const
PaperSize paperSize () const
QSizeF paperSize ( Unit unit ) const
PaperSource paperSource () const
QPrintEngine * printEngine () const
QString printProgram () const
PrintRange printRange () const
QString printerName () const
// QString printerSelectionOption () const
PrinterState printerState () const
int resolution () const
void setCollateCopies ( bool collate )
void setColorMode ( ColorMode newColorMode )
void setCreator ( const QString & creator )
void setDocName ( const QString & name )
void setDoubleSidedPrinting ( bool doubleSided )
void setDuplex ( DuplexMode duplex )
void setFontEmbeddingEnabled ( bool enable )
void setFromTo ( int from, int to )
void setFullPage ( bool fp )
void setNumCopies ( int numCopies )
void setOrientation ( Orientation orientation )
void setOutputFileName ( const QString & fileName )
void setOutputFormat ( OutputFormat format )
void setPageMargins ( qreal left, qreal top, qreal right, qreal bottom, Unit unit )
void setPageOrder ( PageOrder pageOrder )
void setPaperSize ( PaperSize newPaperSize )
void setPaperSize ( const QSizeF & paperSize, Unit unit )
void setPaperSource ( PaperSource source )
void setPrintProgram ( const QString & printProg )
void setPrintRange ( PrintRange range )
void setPrinterName ( const QString & name )
// void setPrinterSelectionOption ( const QString & option )
void setResolution ( int dpi )
// void setWinPageSize ( int pageSize )
// QList<PaperSource> supportedPaperSources () const
QList<int> supportedResolutions () const
int toPage () const
// int winPageSize () const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>
