/*
 * $Id: QStringRef.qth 16442 2011-03-09 08:10:56Z vszakats $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject  = no
Inherit  = 
Type     = 
New      = 
</CLASS>

<CODE>
#include <QtCore/QStringRef>


/*
 * QStringRef ()
 * QStringRef ( const QString * string )
 * QStringRef ( const QStringRef & other )
 * QStringRef ( const QString * string, int position, int length )
 * ~QStringRef ()
 */
HB_FUNC( QT_QSTRINGREF )
{
   if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      __HB_RETPTRGC__( new QStringRef( ( const QString *) hb_parcx( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISOBJECT( 1 ) )
   {
      __HB_RETPTRGC__( new QStringRef( * hbqt_par_QStringRef( 1 ) ) );
   }
   else if( hb_pcount() == 3  && HB_ISCHAR( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) )
   {
      __HB_RETPTRGC__( new QStringRef( ( const QString *) hb_parcx( 1 ), hb_parni( 2 ), hb_parni( 3 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QStringRef() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
//QStringRef appendTo ( QString * string ) const
const QChar at ( int position ) const
void clear ()
int compare ( const QString & other, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
int compare ( const QStringRef & other, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
//int compare ( QLatin1String other, Qt::CaseSensitivity cs = Qt::CaseSensitive ) const
const QChar * constData () const
int count () const
const QChar * data () const
bool isEmpty () const
bool isNull () const
int length () const
int localeAwareCompare ( const QString & other ) const
int localeAwareCompare ( const QStringRef & other ) const
int position () const
int size () const
//const QString * string () const
//QString toString () const
const QChar * unicode () const

int compare ( const QStringRef & s1, const QString & s2, Qt::CaseSensitivity cs = Qt::CaseSensitive )
int compare ( const QStringRef & s1, const QStringRef & s2, Qt::CaseSensitivity cs = Qt::CaseSensitive )
//int compare ( const QStringRef & s1, QLatin1String s2, Qt::CaseSensitivity cs = Qt::CaseSensitive )
int localeAwareCompare ( const QStringRef & s1, const QString & s2 )
int localeAwareCompare ( const QStringRef & s1, const QStringRef & s2 )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>

<VARIABLES>
</VARIABLES>
