/*
 * $Id: QFileInfo.qth 16548 2011-04-07 23:13:20Z vouchcac $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject    = no
Inherits   =
Type       = Core
New        =
Destructor =
</CLASS>

<CODE>
#include <QtCore/QFileInfo>
#include <QtCore/QDir>
#include <QtCore/QDateTime>


/* QFileInfo ()
 * QFileInfo ( const QString & file )
 * QFileInfo ( const QFile & file )
 * QFileInfo ( const QDir & dir, const QString & file )
 * QFileInfo ( const QFileInfo & fileinfo )
 * ~QFileInfo ()
 */
HB_FUNC( QT_QFILEINFO )
{
   if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      __HB_RETPTRGC__( new QFileInfo( hbqt_par_QString( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISOBJECT( 1 ) )
   {
      if( hbqt_isObjectType( 1, HBQT_TYPE_QFile ) )
      {
         __HB_RETPTRGC__( new QFileInfo( *hbqt_par_QFile( 1 ) ) );
      }
      else if( hbqt_isObjectType( 1, HBQT_TYPE_QFileInfo ) )
      {
         __HB_RETPTRGC__( new QFileInfo( *hbqt_par_QFileInfo( 1 ) ) );
      }
   }
   if( hb_pcount() == 2 && HB_ISOBJECT( 1 ) && HB_ISCHAR( 2 ) )
   {
      __HB_RETPTRGC__( new QFileInfo( *hbqt_par_QDir( 1 ), hbqt_par_QString( 2 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QFileInfo() );
   }
}
</CODE>

<ENUMS>
flags PermissionSpec
</ENUMS>

<PROTOS>
QDir absoluteDir () const
QString absoluteFilePath () const
QString absolutePath () const
QString baseName () const
QString bundleName () const
bool caching () const
QString canonicalFilePath () const
QString canonicalPath () const
QString completeBaseName () const
QString completeSuffix () const
QDateTime created () const
QDir dir () const
bool exists () const
QString fileName () const
QString filePath () const
QString group () const
uint groupId () const
bool isAbsolute () const
bool isBundle () const
bool isDir () const
bool isExecutable () const
bool isFile () const
bool isHidden () const
bool isReadable () const
bool isRelative () const
bool isRoot () const
bool isSymLink () const
bool isWritable () const
QDateTime lastModified () const
QDateTime lastRead () const
bool makeAbsolute ()
QString owner () const
uint ownerId () const
QString path () const
bool permission ( QFile::Permissions permissions ) const
QFile::Permissions permissions () const
void refresh ()
void setCaching ( bool enable )
void setFile ( const QString & file )
void setFile ( const QFile & file )
void setFile ( const QDir & dir, const QString & file )
qint64 size () const
QString suffix () const
QString symLinkTarget () const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
