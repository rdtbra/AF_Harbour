/*
 * $Id: QRectF.qth 16548 2011-04-07 23:13:20Z vouchcac $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject  = no
Type     = PlainObject
New      =
</CLASS>

<CODE>
#include <QtCore/QRectF>


/*
 * QRectF ()
 * QRectF ( const QPointF & topLeft, const QSizeF & size )
 * QRectF ( const QPointF & topLeft, const QPointF & bottomRight )
 * QRectF ( qreal x, qreal y, qreal width, qreal height )
 * QRectF ( const QRect & rectangle )
 * ~QRectF ()
 */
HB_FUNC( QT_QRECTF )
{
   if( hb_pcount() == 1 && HB_ISOBJECT( 1 ) )
   {
      __HB_RETPTRGC__( new QRectF( *hbqt_par_QRectF( 1 ) ) );
   }
   else if( hb_pcount() == 2 && HB_ISOBJECT( 1 ) && HB_ISOBJECT( 2 ) )
   {
      if( hbqt_isObjectType( 2, HBQT_TYPE_QPointF ) )
      {
         __HB_RETPTRGC__( new QRectF( *hbqt_par_QPointF( 1 ), *hbqt_par_QPointF( 2 ) ) );
      }
      if( hbqt_isObjectType( 2, HBQT_TYPE_QSizeF ) )
      {
         __HB_RETPTRGC__( new QRectF( *hbqt_par_QPointF( 1 ), *hbqt_par_QSizeF( 2 ) ) );
      }
   }
   else if( hb_pcount() == 4 && HB_ISNUM( 1 ) && HB_ISNUM( 2 ) && HB_ISNUM( 3 ) && HB_ISNUM( 4 ) )
   {
      __HB_RETPTRGC__( new QRectF( hb_parnd( 1 ), hb_parnd( 2 ), hb_parnd( 3 ), hb_parnd( 4 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QRectF() );
   }
}
</CODE>

<ENUMS>
</ENUMS>

<PROTOS>
void adjust ( qreal dx1, qreal dy1, qreal dx2, qreal dy2 )
QRectF adjusted ( qreal dx1, qreal dy1, qreal dx2, qreal dy2 ) const
qreal bottom () const
QPointF bottomLeft () const
QPointF bottomRight () const
QPointF center () const
bool contains ( const QPointF & point ) const
bool contains ( qreal x, qreal y ) const
bool contains ( const QRectF & rectangle ) const
void getCoords ( qreal * x1, qreal * y1, qreal * x2, qreal * y2 ) const
void getRect ( qreal * x, qreal * y, qreal * width, qreal * height ) const
qreal height () const
QRectF intersected ( const QRectF & rectangle ) const
bool intersects ( const QRectF & rectangle ) const
bool isEmpty () const
bool isNull () const
bool isValid () const
qreal left () const
void moveBottom ( qreal y )
void moveBottomLeft ( const QPointF & position )
void moveBottomRight ( const QPointF & position )
void moveCenter ( const QPointF & position )
void moveLeft ( qreal x )
void moveRight ( qreal x )
void moveTo ( qreal x, qreal y )
void moveTo ( const QPointF & position )
void moveTop ( qreal y )
void moveTopLeft ( const QPointF & position )
void moveTopRight ( const QPointF & position )
QRectF normalized () const
qreal right () const
void setBottom ( qreal y )
void setBottomLeft ( const QPointF & position )
void setBottomRight ( const QPointF & position )
void setCoords ( qreal x1, qreal y1, qreal x2, qreal y2 )
void setHeight ( qreal height )
void setLeft ( qreal x )
void setRect ( qreal x, qreal y, qreal width, qreal height )
void setRight ( qreal x )
void setSize ( const QSizeF & size )
void setTop ( qreal y )
void setTopLeft ( const QPointF & position )
void setTopRight ( const QPointF & position )
void setWidth ( qreal width )
void setX ( qreal x )
void setY ( qreal y )
QSizeF size () const
QRect toAlignedRect () const
QRect toRect () const
qreal top () const
QPointF topLeft () const
QPointF topRight () const
void translate ( qreal dx, qreal dy )
void translate ( const QPointF & offset )
QRectF translated ( qreal dx, qreal dy ) const
QRectF translated ( const QPointF & offset ) const
QRectF united ( const QRectF & rectangle ) const
qreal width () const
qreal x () const
qreal y () const
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
