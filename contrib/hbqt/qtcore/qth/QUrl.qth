/*
 * $Id: QUrl.qth 16548 2011-04-07 23:13:20Z vouchcac $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject  = no
Inherits = QObject
New      = pParent
</CLASS>

<CODE>
#include <QtCore/QStringList>
#include <QtCore/QUrl>


/*
 * QUrl ()
 * QUrl ( const QString & url )
 * QUrl ( const QUrl & other )
 * QUrl ( const QString & url, ParsingMode parsingMode )
 * ~QUrl ()
 */
HB_FUNC( QT_QURL )
{
   if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      __HB_RETPTRGC__( new QUrl( hbqt_par_QString( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISOBJECT( 1 ) )
   {
      __HB_RETPTRGC__( new QUrl( *hbqt_par_QUrl( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) && HB_ISNUM( 2 ) )
   {
      __HB_RETPTRGC__( new QUrl( hbqt_par_QString( 1 ), ( QUrl::ParsingMode ) hb_parni( 2 ) ) );
   }
   else
   {
      __HB_RETPTRGC__( new QUrl() );
   }
}
/*
 * void setQueryDelimiters ( char valueDelimiter, char pairDelimiter )
 */
HB_FUNC( QT_QURL_SETQUERYDELIMITERS )
{
   hbqt_par_QUrl( 1 )->setQueryDelimiters( ( char ) hb_parni( 2 ), ( char ) hb_parni( 3 ) );
}
</CODE>

<ENUMS>
enum FormattingOption { None, RemoveScheme, RemovePassword, RemoveUserInfo, ..., StripTrailingSlash }
flags FormattingOptions
enum ParsingMode { TolerantMode, StrictMode }
</ENUMS>

<PROTOS>
void addEncodedQueryItem ( const QByteArray & key, const QByteArray & value )
void addQueryItem ( const QString & key, const QString & value )
QList<QByteArray> allEncodedQueryItemValues ( const QByteArray & key ) const
QStringList allQueryItemValues ( const QString & key ) const
QString authority () const
void clear ()
QByteArray encodedFragment () const
QByteArray encodedHost () const
QByteArray encodedPassword () const
QByteArray encodedPath () const
QByteArray encodedQuery () const
QByteArray encodedQueryItemValue ( const QByteArray & key ) const
QList<QPair<QByteArray, QByteArray> > encodedQueryItems () const
QByteArray encodedUserName () const
QString errorString () const
QString fragment () const
bool hasEncodedQueryItem ( const QByteArray & key ) const
bool hasFragment () const
bool hasQuery () const
bool hasQueryItem ( const QString & key ) const
QString host () const
bool isEmpty () const
bool isParentOf ( const QUrl & childUrl ) const
bool isRelative () const
bool isValid () const
QString password () const
QString path () const
int port () const
int port ( int defaultPort ) const
QString queryItemValue ( const QString & key ) const
QList<QPair<QString, QString> > queryItems () const
char queryPairDelimiter () const
char queryValueDelimiter () const
void removeAllEncodedQueryItems ( const QByteArray & key )
void removeAllQueryItems ( const QString & key )
void removeEncodedQueryItem ( const QByteArray & key )
void removeQueryItem ( const QString & key )
QUrl resolved ( const QUrl & relative ) const
QString scheme () const
void setAuthority ( const QString & authority )
void setEncodedFragment ( const QByteArray & fragment )
void setEncodedHost ( const QByteArray & host )
void setEncodedPassword ( const QByteArray & password )
void setEncodedPath ( const QByteArray & path )
void setEncodedQuery ( const QByteArray & query )
void setEncodedQueryItems ( const QList<QPair<QByteArray, QByteArray> > & query )
void setEncodedUrl ( const QByteArray & encodedUrl )
void setEncodedUrl ( const QByteArray & encodedUrl, ParsingMode parsingMode )
void setEncodedUserName ( const QByteArray & userName )
void setFragment ( const QString & fragment )
void setHost ( const QString & host )
void setPassword ( const QString & password )
void setPath ( const QString & path )
void setPort ( int port )
#
# Shifted to CODE Section
#
//void setQueryDelimiters ( char valueDelimiter, char pairDelimiter )
void setQueryItems ( const QList<QPair<QString, QString> > & query )
void setScheme ( const QString & scheme )
void setUrl ( const QString & url )
void setUrl ( const QString & url, ParsingMode parsingMode )
void setUserInfo ( const QString & userInfo )
void setUserName ( const QString & userName )
QByteArray toEncoded ( FormattingOptions options = None ) const
QString toLocalFile () const
QString toString ( FormattingOptions options = None ) const
QString userInfo () const
QString userName () const


QString fromAce ( const QByteArray & domain )
QUrl fromEncoded ( const QByteArray & input )
QUrl fromEncoded ( const QByteArray & input, ParsingMode parsingMode )
QUrl fromLocalFile ( const QString & localFile )
QString fromPercentEncoding ( const QByteArray & input )
QStringList idnWhitelist ()
void setIdnWhitelist ( const QStringList & list )
QByteArray toAce ( const QString & domain )
QByteArray toPercentEncoding ( const QString & input, const QByteArray & exclude = QByteArray(), const QByteArray & include = QByteArray() )
</PROTOS>
