/*
 * $Id: QRegExp.qth 16548 2011-04-07 23:13:20Z vouchcac $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject    = no
Inherits   =
Type       = Core
New        =
Destructor =
</CLASS>

<CODE>
#include <QtCore/QRegExp>
#include <QtCore/QStringList>

/* QRegExp ()
 * QRegExp ( const QString & pattern, Qt::CaseSensitivity cs = Qt::CaseSensitive, PatternSyntax syntax = RegExp )
 * QRegExp ( const QRegExp & rx )
 * ~QRegExp ()
 */
HB_FUNC( QT_QREGEXP )
{
   if( hb_pcount() == 1 && HB_ISOBJECT( 1 ) )
   {
      __HB_RETPTRGC__( new QRegExp( *hbqt_par_QRegExp( 1 ) ) );
   }
   else if( hb_pcount() >= 1 && HB_ISCHAR( 1 ) )
   {
      __HB_RETPTRGC__( new QRegExp( hbqt_par_QString( 1 ), HB_ISNUM( 2 ) ? ( Qt::CaseSensitivity ) hb_parni( 2 ) : Qt::CaseSensitive, HB_ISNUM( 3 ) ? ( QRegExp::PatternSyntax ) hb_parni( 3 ) : QRegExp::RegExp ) );
   }
   else
   {
      __HB_RETPTRGC__( new QRegExp() );
   }
}
</CODE>

<ENUMS>
enum CaretMode { CaretAtZero, CaretAtOffset, CaretWontMatch }
enum PatternSyntax { RegExp, RegExp2, Wildcard, FixedString }
</ENUMS>

<PROTOS>
QString cap ( int nth = 0 ) const
QStringList capturedTexts () const
Qt::CaseSensitivity caseSensitivity () const
QString errorString () const
bool exactMatch ( const QString & str ) const
int indexIn ( const QString & str, int offset = 0, CaretMode caretMode = CaretAtZero ) const
bool isEmpty () const
bool isMinimal () const
bool isValid () const
int lastIndexIn ( const QString & str, int offset = -1, CaretMode caretMode = CaretAtZero ) const
int matchedLength () const
int numCaptures () const
QString pattern () const
PatternSyntax patternSyntax () const
int pos ( int nth = 0 ) const
void setCaseSensitivity ( Qt::CaseSensitivity cs )
void setMinimal ( bool minimal )
void setPattern ( const QString & pattern )
void setPatternSyntax ( PatternSyntax syntax )
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
