/*
 * $Id: QLocale.qth 16548 2011-04-07 23:13:20Z vouchcac $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
QObject    = no
Inherits   =
Type       = Core
New        =
Destructor =
</CLASS>

<CODE>
#include <QtCore/QLocale>
#include <QtCore/QDate>

/* QLocale ()
 * QLocale ( const QString & name )
 * QLocale ( QLocale::Language language, QLocale::Country country = AnyCountry )
 * QLocale ( const QLocale & other )
 */
HB_FUNC( QT_QLOCALE )
{
   if( hb_pcount() == 1 && HB_ISOBJECT( 1 ) )
   {
      __HB_RETPTRGC__( new QLocale( *hbqt_par_QLocale( 1 ) ) );
   }
   else if( hb_pcount() == 1 && HB_ISCHAR( 1 ) )
   {
      __HB_RETPTRGC__( new QLocale( hbqt_par_QString( 1 ) ) );
   }
   else if( hb_pcount() >= 1 && HB_ISNUM( 1 ) )
   {
      __HB_RETPTRGC__( new QLocale( ( QLocale::Language ) hb_parni( 1 ), HB_ISNUM( 2 ) ? ( QLocale::Country ) hb_parni( 2 ) : QLocale::AnyCountry ) );
   }
   else
   {
      __HB_RETPTRGC__( new QLocale() );
   }
}
</CODE>

<ENUMS>
enum Country { AnyCountry, Afghanistan, Albania, Algeria, ..., Zimbabwe }
enum FormatType { LongFormat, ShortFormat, NarrowFormat }
enum Language { C, Abkhazian, Afan, Afar, ..., Chewa }
enum MeasurementSystem { MetricSystem, ImperialSystem }
enum NumberOption { OmitGroupSeparator, RejectGroupSeparator }
flags NumberOptions
</ENUMS>

<PROTOS>
QString amText () const
Country country () const
QString dateFormat ( FormatType format = LongFormat ) const
QString dateTimeFormat ( FormatType format = LongFormat ) const
QString dayName ( int day, FormatType type = LongFormat ) const
QChar decimalPoint () const
QChar exponential () const
QChar groupSeparator () const
Language language () const
MeasurementSystem measurementSystem () const
QString monthName ( int month, FormatType type = LongFormat ) const
QString name () const
QChar negativeSign () const
NumberOptions numberOptions () const
QChar percent () const
QString pmText () const
QChar positiveSign () const
void setNumberOptions ( NumberOptions options )
QString standaloneDayName ( int day, FormatType type = LongFormat ) const
QString standaloneMonthName ( int month, FormatType type = LongFormat ) const
QString timeFormat ( FormatType format = LongFormat ) const
QDate toDate ( const QString & string, FormatType format = LongFormat ) const
QDate toDate ( const QString & string, const QString & format ) const
QDateTime toDateTime ( const QString & string, FormatType format = LongFormat ) const
QDateTime toDateTime ( const QString & string, const QString & format ) const
double toDouble ( const QString & s, bool * ok = 0 ) const
float toFloat ( const QString & s, bool * ok = 0 ) const
int toInt ( const QString & s, bool * ok = 0, int base = 0 ) const
qlonglong toLongLong ( const QString & s, bool * ok = 0, int base = 0 ) const
short toShort ( const QString & s, bool * ok = 0, int base = 0 ) const

//QString toString ( qlonglong i ) const
QString toString ( const QDate & date, const QString & format ) const
QString toString ( const QDate & date, FormatType format = LongFormat ) const
QString toString ( const QTime & time, const QString & format ) const
QString toString ( const QTime & time, FormatType format = LongFormat ) const
QString toString ( const QDateTime & dateTime, FormatType format = LongFormat ) const
QString toString ( const QDateTime & dateTime, const QString & format ) const
//QString toString ( qulonglong i ) const
//QString toString ( double i, char f = 'g', int prec = 6 ) const
//QString toString ( short i ) const
//QString toString ( ushort i ) const
QString toString ( int i ) const
//QString toString ( uint i ) const
//QString toString ( float i, char f = 'g', int prec = 6 ) const

QTime toTime ( const QString & string, FormatType format = LongFormat ) const
QTime toTime ( const QString & string, const QString & format ) const
uint toUInt ( const QString & s, bool * ok = 0, int base = 0 ) const
qlonglong toULongLong ( const QString & s, bool * ok = 0, int base = 0 ) const
ushort toUShort ( const QString & s, bool * ok = 0, int base = 0 ) const
QChar zeroDigit () const

QLocale c ()
//QList<Country> countriesForLanguage ( Language language )
QString countryToString ( Country country )
QString languageToString ( Language language )
void setDefault ( const QLocale & locale )
QLocale system ()
</PROTOS>

<SLOTS>
</SLOTS>

<SIGNALS>
</SIGNALS>
