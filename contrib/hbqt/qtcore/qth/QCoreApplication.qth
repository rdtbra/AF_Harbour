/*
 * $Id: QCoreApplication.qth 16418 2011-03-03 01:22:51Z vouchcac $
 */

/*
 * Harbour Qt wrapper generator control file
 *
 * Copyright 2009-2010 Pritpal Bedi <bedipritpal@hotmail.com>
 * www - http://www.harbour-project.org
 *
 * See COPYING for licensing terms.
 */

<CLASS>
Inherits = QObject
Type     = Core
New      =
Constructor = No
</CLASS>


<CODE>
#include <QtCore/QStringList>
#include <QtCore/QCoreApplication>

/*
 * QCoreApplication ( int & argc, char ** argv )
 * ~QCoreApplication ()
 */
HB_FUNC( QT_QCOREAPPLICATION )
{

}
</CODE>

<ENUMS>
enum Encoding { CodecForTr, UnicodeUTF8, DefaultCodec }
</ENUMS>

<PROTOS>
// bool filterEvent ( void * message, long * result )
virtual bool notify ( QObject * receiver, QEvent * event )
// EventFilter setEventFilter ( EventFilter filter )
// virtual bool winEventFilter ( MSG * msg, long * result )

void addLibraryPath ( const QString & path )
QString applicationDirPath ()
QString applicationFilePath ()
QString applicationName ()
qint64 applicationPid ()
QString applicationVersion ()
QStringList arguments ()
bool closingDown ()
int exec ()
void exit ( int returnCode = 0 )
void flush ()
bool hasPendingEvents ()
void installTranslator ( QTranslator * translationFile )
QCoreApplication * instance ()
QStringList libraryPaths ()
QString organizationDomain ()
QString organizationName ()
void postEvent ( QObject * receiver, QEvent * event )
void postEvent ( QObject * receiver, QEvent * event, int priority )
void processEvents ( QEventLoop::ProcessEventsFlags flags = QEventLoop::AllEvents )
void processEvents ( QEventLoop::ProcessEventsFlags flags, int maxtime )
void removeLibraryPath ( const QString & path )
void removePostedEvents ( QObject * receiver )
void removePostedEvents ( QObject * receiver, int eventType )
void removeTranslator ( QTranslator * translationFile )
bool sendEvent ( QObject * receiver, QEvent * event )
void sendPostedEvents ( QObject * receiver, int event_type )
void sendPostedEvents ()
void setApplicationName ( const QString & application )
void setApplicationVersion ( const QString & version )
void setAttribute ( Qt::ApplicationAttribute attribute, bool on = true )
void setLibraryPaths ( const QStringList & paths )
void setOrganizationDomain ( const QString & orgDomain )
void setOrganizationName ( const QString & orgName )
bool startingUp ()
bool testAttribute ( Qt::ApplicationAttribute attribute )
QString translate ( const char * context, const char * sourceText, const char * disambiguation, Encoding encoding, int n )
QString translate ( const char * context, const char * sourceText, const char * disambiguation = 0, Encoding encoding = CodecForTr )
</PROTOS>

<SLOTS>
void quit ()
</SLOTS>

<SIGNALS>
void aboutToQuit ()
</SIGNALS>
