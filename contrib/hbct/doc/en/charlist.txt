/*
 * $Id: charlist.txt 15102 2010-07-14 12:48:39Z vszakats $
 */

/*  $DOC$
 *  $FUNCNAME$
 *      CHARLIST()
 *  $CATEGORY$
 *      CT3 string functions
 *  $ONELINER$
 *      Generates a list of all characters in a string
 *  $SYNTAX$
 *      CHARLIST ([<cString>]) -> cCharacterList
 *  $ARGUMENTS$
 *      [<cString>]       is the string for whom the function generates a list
 *                        of all characters
 *                        Default: "" (empty string)
 *  $RETURNS$
 *      <cCharacterList>  a list of the characters in <cString>
 *  $DESCRIPTION$
 *      The CHARLIST() function generates a list of those characters that
 *      are contained in <cString>. This list can contain each character
 *      only once, so that its maximum length is 256. The list lists those
 *      characters first that are occuring in <cString> first.
 *  $EXAMPLES$
 *      ? charlist ("Hello World !") --> "Helo Wrd!"
 *  $TESTS$
 *      charlist ("Hello World !") == "Helo Wrd!"
 *      charlist (nil) == ""
 *  $STATUS$
 *      Ready
 *  $COMPLIANCE$
 *      CHARLIST() is compatible with CT3's CHARLIST().
 *  $PLATFORMS$
 *      All
 *  $FILES$
 *      Source is charlist.c, library is libct.
 *  $SEEALSO$
 *      CHARNOLIST(),CHARSLIST(),CHARHIST()
 *  $END$
 */

/*  $DOC$
 *  $FUNCNAME$
 *      CHARNOLIST()
 *  $CATEGORY$
 *      CT3 string functions
 *  $ONELINER$
 *      Generates a list of all characters not contained in a string
 *  $SYNTAX$
 *      CHARNOLIST ([<cString>]) -> cCharacterList
 *  $ARGUMENTS$
 *      [<cString>]       is the string for whom the function generates a list
 *                        of all characters not contained in that string
 *                        Default: "" (empty string)
 *  $RETURNS$
 *      <cCharacterList>  a list of the characters that are not contained in <cString>
 *  $DESCRIPTION$
 *      The CHARNOLIST() function generates a list of those characters that
 *      are not contained in <cString>. This list can contain each character
 *      only once, so that its maximum length is 256. The list is alphabetically
 *      sorted.
 *  $EXAMPLES$
 *      ? charnolist (charnolist ("Hello World !")) --> " !HWdelor"
 *  $TESTS$
 *      charnolist (charnolist ("Hello World !")) == charslist ("Hello World !")
 *      charnolist (charnolist (nil)) == ""
 *  $STATUS$
 *      Ready
 *  $COMPLIANCE$
 *      CHARNOLIST() is compatible with CT3's CHARNOLIST().
 *  $PLATFORMS$
 *      All
 *  $FILES$
 *      Source is charlist.c, library is libct.
 *  $SEEALSO$
 *      CHARLIST(),CHARSLIST(),CHARHIST()
 *  $END$
 */
