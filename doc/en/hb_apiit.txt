/*
 * $Id: hb_apiit.txt 16297 2011-02-14 10:28:37Z vszakats $
 */

/*
 * The following parts are Copyright of the individual authors.
 * www - http://harbour-project.org
 *
 * Copyright 1999 Antonio Linares <alinares@fivetech.com>
 *   Header file for the API
 * $SUBCATEGORY$
 *      Item
 *
 * See COPYING for licensing terms.
 *
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_evalLaunch()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_evalLaunch( PHB_EVALINFO pEvalInfo ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pEvalInfo>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_evalNew()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_evalNew( PHB_EVALINFO pEvalInfo, PHB_ITEM pItem ) --> ( HB_BOOL ) bResult
 *  $ARGUMENTS$
 *      <pEvalInfo>
 *
 *      <pItem>
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_evalPutParam()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_evalPutParam( PHB_EVALINFO pEvalInfo, PHB_ITEM pItem ) --> ( HB_BOOL ) bResult
 *  $ARGUMENTS$
 *      <pEvalInfo>
 *
 *      <pItem>
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_evalRelease()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_evalRelease( PHB_EVALINFO pEvalInfo ) --> ( HB_BOOL ) bResult
 *  $ARGUMENTS$
 *      <pEvalInfo>
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemDo()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemDo( PHB_ITEM pItem, USHORT uiPCount, PHB_ITEM pItemArg1, ... ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <uiPCount>
 *
 *      <pItemArg1>
 *
 *      <...>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemDoC()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemDoC( char * szFunc, USHORT uiPCount, PHB_ITEM pItemArg1, ... ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <szFunc>
 *
 *      <uiPCount>
 *
 *      <pItemArg1>
 *
 *      <...>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemArrayGet()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemArrayGet( PHB_ITEM pArray, ULONG ulIndex ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulIndex>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemArrayNew()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemArrayNew( ULONG ulLen ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <ulLen>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemArrayPut()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemArrayPut( PHB_ITEM pArray, ULONG ulIndex, PHB_ITEM pItem ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pArray>
 *
 *      <ulIndex>
 *
 *      <pItem>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemCopyC()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemCopyC( PHB_ITEM pItem, char * szBuffer, ULONG ulLen ) --> ( ULONG )ulResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <szBuffer>
 *
 *      <ulLen>
 *  $RETURNS$
 *      <ulResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemFreeC()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemFreeC( char * szText ) --> ( HB_BOOL ) bResult
 *  $ARGUMENTS$
 *      <szText>
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemGetC()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemGetC( PHB_ITEM pItem ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *      <pszResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemGetCPtr()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemGetCPtr( PHB_ITEM pItem ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *      <pszResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemGetCLen()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemGetCLen( PHB_ITEM pItem ) --> ( ULONG )ulResult
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *      <ulResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemGetDS()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemGetDS( PHB_ITEM pItem, char * szDate ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <szDate>
 *  $RETURNS$
 *      <pszResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemGetDL()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemGetDL( PHB_ITEM pItem ) --> ( long )lResult
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *      <lResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemGetL()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemGetL( PHB_ITEM pItem ) --> ( HB_BOOL ) bResult
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemGetND()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemGetND( PHB_ITEM pItem ) --> ( double )dResult
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *      <dResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemGetNI()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemGetNI( PHB_ITEM pItem ) --> ( int )iResult
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *      <iResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemGetNL()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemGetNL( PHB_ITEM pItem ) --> ( long )lResult
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *      <lResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_itemGetNLen()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemGetNLen( PHB_ITEM pItem, int * piWidth, int * piDec )
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <piWidth>
 *
 *      <piDec>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemGetPtr()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemGetPtr( PHB_ITEM pItem ) --> ( void * )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemNew()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemNew( PHB_ITEM pNull ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pNull>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_itemInit()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemInit( PHB_ITEM pItem )
 *  $ARGUMENTS$
 *      <pItem>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemPCount()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemPCount( void ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemParam()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *      Creates a copy of an item parameter (outside the eval stack)
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemParam( USHORT uiParam ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <uiParam>  The 1-based parameter to copy and retrieve.
 *  $RETURNS$
 *      A pointer to a new copy of the specified item parameter.
 *
 *  $DESCRIPTION$
 *      Use this function whenever the pointer needs to be accessed after
 *      the current function returns; for example, if the pointer is to
 *      be copied to a static variable or structure member for later access.

 *      Compare to hb_param(), which simply gets a direct pointer to the
 *      item on the stack.

 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *      hb_param()
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemPutC()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemPutC( PHB_ITEM pItem, char * szText ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <szText>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemPutCPtr()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemPutCPtr( PHB_ITEM pItem, char * szText ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <szText>
 *
 *      <ulLen>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemPutCLPtr()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemPutCLPtr( PHB_ITEM pItem, char * szText, ULONG ulLen ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <szText>
 *
 *      <ulLen>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemPutCL()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemPutCL( PHB_ITEM pItem, char * szText, ULONG ulLen ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <szText>
 *
 *      <ulLen>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_itemSetCMemo()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemSetCMemo( PHB_ITEM pItem )
 *  $ARGUMENTS$
 *      <pItem>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemPutD()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemPutD( PHB_ITEM pItem, long lYear, long lMonth, long lDay ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <lYear>
 *
 *      <lMonth>
 *
 *      <lDay>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemPutDS()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemPutDS( PHB_ITEM pItem, char * szDate ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <szDate>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemPutDL()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemPutDL( PHB_ITEM pItem, long lJulian ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <lJulian>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemPutL()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemPutL( PHB_ITEM pItem, HB_BOOL bValue ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <bValue>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemPutND()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemPutND( PHB_ITEM pItem, double dNumber ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <dNumber>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemPutNI()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemPutNI( PHB_ITEM pItem, int iNumber ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <iNumber>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemPutNL()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemPutNL( PHB_ITEM pItem, long lNumber ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <lNumber>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemPutNLen()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemPutNLen( PHB_ITEM pItem, double dNumber, int iWidth, int iDec ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <dNumber>
 *
 *      <iWidth>
 *
 *      <iDec>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemPutNDLen()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemPutNDLen( PHB_ITEM pItem, double dNumber, int iWidth, int iDec ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <dNumber>
 *
 *      <iWidth>
 *
 *      <iDec>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemPutNILen()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemPutNILen( PHB_ITEM pItem, int iNumber, int iWidth ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <iNumber>
 *
 *      <iWidth>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemPutNLLen()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemPutNLLen( PHB_ITEM pItem, long lNumber, int iWidth ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <lNumber>
 *
 *      <iWidth>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemPutPtr()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemPutPtr( PHB_ITEM pItem, void * pValue ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <pValue>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemRelease()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemRelease( PHB_ITEM pItem ) --> ( HB_BOOL ) bResult
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemReturn()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemReturn( PHB_ITEM pItem ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemSize()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemSize( PHB_ITEM pItem ) --> ( ULONG )ulResult
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *      <ulResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemType()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemType( PHB_ITEM pItem ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemTypeStr()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemTypeStr( PHB_ITEM pItem ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *      <pszResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemParamPtr()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemParamPtr( USHORT uiParam, int iMask ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <uiParam>
 *
 *      <iMask>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemReturnPtr()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemReturnPtr( void ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemStrCmp()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *      Our string compare
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemStrCmp( PHB_ITEM pFirst, PHB_ITEM pSecond, HB_BOOL bForceExact ) --> ( int )iResult
 *  $ARGUMENTS$
 *      <pFirst>
 *
 *      <pSecond>
 *
 *      <bForceExact>
 *  $RETURNS$
 *      <iResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_itemCopy()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *      Copies an item to one place to another respecting its containts
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemCopy( PHB_ITEM pDest, PHB_ITEM pSource )
 *  $ARGUMENTS$
 *      <pDest>
 *
 *      <pSource>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_itemClear()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemClear( PHB_ITEM pItem )
 *  $ARGUMENTS$
 *      <pItem>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemUnRef()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *      De-references passed variable
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemUnRef( PHB_ITEM pItem ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemStr()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *      Convert a number to a string
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemStr( PHB_ITEM pNumber, PHB_ITEM pWidth, PHB_ITEM pDec ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <pNumber>
 *
 *      <pWidth>
 *
 *      <pDec>
 *  $RETURNS$
 *      <pszResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemString()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *      Convert any scalar to a string
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemString( PHB_ITEM pItem, ULONG * ulLen, HB_BOOL * bFreeReq ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <ulLen>
 *
 *      <bFreeReq>
 *  $RETURNS$
 *      <pszResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemValToStr()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *      Convert any scalar to a string
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemValToStr( PHB_ITEM pItem ) --> ( PHB_ITEM )pResult
 *  $ARGUMENTS$
 *      <pItem>
 *  $RETURNS$
 *      <pResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_itemPadConv()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemPadConv( PHB_ITEM pItem, char * buffer, ULONG * pulSize ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *      <pItem>
 *
 *      <buffer>
 *
 *      <pulSize>
 *  $RETURNS$
 *      <pszResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_itemSwap()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *      Item
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapiitm.h>
 *      hb_itemSwap( PHB_ITEM pItem1, PHB_ITEM pItem2 )
 *  $ARGUMENTS$
 *      <pItem1>
 *
 *      <pItem2>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is rtl
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */
