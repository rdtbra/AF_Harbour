/*
 * $Id: hb_apigt.txt 16297 2011-02-14 10:28:37Z vszakats $
 */

/*
 * The following parts are Copyright of the individual authors.
 * www - http://harbour-project.org
 *
 * Copyright 1999 {list of individual authors and e-mail addresses}
 *   Header file for the API
 * $SUBCATEGORY$
 *    Terminal
 *
 * See COPYING for licensing terms.
 *
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gtInit()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtInit( int iFilenoStdin, int iFilenoStdout, int iFilenoStderr )
 *  $ARGUMENTS$
 *      <iFilenoStdin>
 *
 *      <iFilenoStdout>
 *
 *      <iFilenoStderr>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gtExit()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtExit( void )
 *  $ARGUMENTS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gtAdjustPos()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtAdjustPos( int iHandle, char * pStr, ULONG ulLen )
 *  $ARGUMENTS$
 *      <iHandle>
 *
 *      <pStr>
 *
 *      <ulLen>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtBox()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtBox( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, BYTE * pbyFrame ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <uiTop>
 *
 *      <uiLeft>
 *
 *      <uiBottom>
 *
 *      <uiRight>
 *
 *      <pbyFrame>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtBoxD()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtBoxD( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <uiTop>
 *
 *      <uiLeft>
 *
 *      <uiBottom>
 *
 *      <uiRight>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtBoxS()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtBoxS( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <uiTop>
 *
 *      <uiLeft>
 *
 *      <uiBottom>
 *
 *      <uiRight>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtColorSelect()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtColorSelect( USHORT uiColorIndex ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <uiColorIndex>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtColorToN()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtColorToN( char * szColorString ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <szColorString>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtDispBegin()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtDispBegin( void ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtDispCount()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtDispCount( void ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtDispEnd()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtDispEnd( void ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtDrawShadow()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtDrawShadow( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, BYTE byAttr ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <uiTop>
 *
 *      <uiLeft>
 *
 *      <uiBottom>
 *
 *      <uiRight>
 *
 *      <byAttr>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtGetBlink()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtGetBlink( HB_BOOL * pbBlink ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <pbBlink>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtGetColorStr()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtGetColorStr( char * pszColorString ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <pszColorString>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtGetCursor()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtGetCursor( USHORT * puiCursorShape ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <puiCursorShape>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtGetPos()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtGetPos( SHORT * piRow, SHORT * piCol ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <piRow>
 *
 *      <piCol>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtIsColor()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtIsColor( void ) --> ( HB_BOOL )bResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtMaxCol()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtMaxCol( void ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtMaxRow()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtMaxRow( void ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtPostExt()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtPostExt( void ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtPreExt()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtPreExt( void ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtSuspend()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *      Prepare the reminal for shell output
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtSuspend( void ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtResume()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *      Resume the terminal after the shell output
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtResume( void ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtReadKey()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtReadKey( HB_inkey_enum eventmask ) --> ( int )iResult
 *  $ARGUMENTS$
 *      <eventmask>
 *  $RETURNS$
 *      <iResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtRectSize()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtRectSize( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, USHORT * puiBuffSize ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <uiTop>
 *
 *      <uiLeft>
 *
 *      <uiBottom>
 *
 *      <uiRight>
 *
 *      <puiBuffSize>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtRepChar()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtRepChar( USHORT uiRow, USHORT uiCol, BYTE byChar, USHORT uiCount ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <uiRow>
 *
 *      <uiCol>
 *
 *      <byChar>
 *
 *      <uiCount>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtRest()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtRest( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, void * pScrBuff ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <uiTop>
 *
 *      <uiLeft>
 *
 *      <uiBottom>
 *
 *      <uiRight>
 *
 *      <pScrBuff>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtSave()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtSave( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, void * pScrBuff ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <uiTop>
 *
 *      <uiLeft>
 *
 *      <uiBottom>
 *
 *      <uiRight>
 *
 *      <pScrBuff>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtScrDim()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtScrDim( USHORT * puiHeight, USHORT * puiWidth ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <puiHeight>
 *
 *      <puiWidth>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtScroll()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtScroll( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, SHORT iRows, SHORT iCols ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <uiTop>
 *
 *      <uiLeft>
 *
 *      <uiBottom>
 *
 *      <uiRight>
 *
 *      <iRows>
 *
 *      <iCols>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtSetBlink()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtSetBlink( HB_BOOL bBlink ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <bBlink>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtSetColorStr()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtSetColorStr( char * pszColorString ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <pszColorString>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtSetCursor()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtSetCursor( USHORT uiCursorShape ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <uiCursorShape>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtSetMode()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtSetMode( USHORT uiRows, USHORT uiCols ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <uiRows>
 *
 *      <uiCols>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtSetPos()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtSetPos( SHORT iRow, SHORT iCol ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <iRow>
 *
 *      <iCol>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtSetPosContext()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtSetPosContext( SHORT iRow, SHORT iCol, SHORT iMode ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <iRow>
 *
 *      <iCol>
 *
 *      <iMode>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtSetSnowFlag()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtSetSnowFlag( HB_BOOL bNoSnow ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <bNoSnow>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gtTone()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtTone( double dFrequency, double dDuration )
 *  $ARGUMENTS$
 *      <dFrequency>
 *
 *      <dDuration>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtWrite()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtWrite( BYTE * pbyStr, ULONG ulLen ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <pbyStr>
 *
 *      <ulLen>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtWriteAt()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtWriteAt( USHORT uiRow, USHORT uiCol, BYTE * pbyStr, ULONG ulLen ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <uiRow>
 *
 *      <uiCol>
 *
 *      <pbyStr>
 *
 *      <ulLen>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtWriteCon()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtWriteCon( BYTE * pbyStr, ULONG ulLen ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <pbyStr>
 *
 *      <ulLen>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtVersion()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtVersion( void ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <pszResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gtWCreate()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtWCreate( HB_GT_RECT * rect, HB_GT_WND ** wnd )
 *  $ARGUMENTS$
 *      <rect>
 *
 *      <wnd>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gtWDestroy()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtWDestroy( HB_GT_WND * wnd )
 *  $ARGUMENTS$
 *      <wnd>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtWFlash()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtWFlash( void ) --> ( HB_BOOL )bResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gtWApp()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtWApp( HB_GT_WND ** wnd )
 *  $ARGUMENTS$
 *      <wnd>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gtWCurrent()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtWCurrent( HB_GT_WND * wnd )
 *  $ARGUMENTS$
 *      <wnd>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gtWPos()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtWPos( HB_GT_WND * wnd, HB_GT_RECT * rect )
 *  $ARGUMENTS$
 *      <wnd>
 *
 *      <rect>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtWVis()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtWVis( HB_GT_WND * wnd, USHORT uiStatus ) --> ( HB_BOOL )bResult
 *  $ARGUMENTS$
 *      <wnd>
 *
 *      <uiStatus>
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtSLR()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *      System Level Request
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtSLR( HB_GT_SLR * pSLR ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <pSLR>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtModalRead()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtModalRead( void * ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <void *>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtBeginWrite()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtBeginWrite( void ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtEndWrite()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtEndWrite( void ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtFlushCursor()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtFlushCursor( void ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtSetColor()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtSetColor( HB_GT_RGB * color ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <color>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtGetColor()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtGetColor( HB_GT_RGB * color ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <color>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gtSetBorder()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gtSetBorder( HB_GT_RGB * color ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <color>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gt_Init()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_Init( int iFilenoStdin, int iFilenoStdout, int iFilenoStderr )
 *  $ARGUMENTS$
 *      <iFilenoStdin>
 *
 *      <iFilenoStdout>
 *
 *      <iFilenoStderr>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gt_Exit()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_Exit( void )
 *  $ARGUMENTS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_AdjustPos()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_AdjustPos( BYTE * pStr, ULONG ulLen ) --> ( HB_BOOL )bResult
 *  $ARGUMENTS$
 *      <pStr>
 *
 *      <ulLen>
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_Box()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_Box( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, BYTE * pbyFrame, BYTE byAttr ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <uiTop>
 *
 *      <uiLeft>
 *
 *      <uiBottom>
 *
 *      <uiRight>
 *
 *      <pbyFrame>
 *
 *      <byAttr>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_BoxD()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_BoxD( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, BYTE * pbyFrame, BYTE byAttr ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <uiTop>
 *
 *      <uiLeft>
 *
 *      <uiBottom>
 *
 *      <uiRight>
 *
 *      <pbyFrame>
 *
 *      <byAttr>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_BoxS()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_BoxS( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, BYTE * pbyFrame, BYTE byAttr ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <uiTop>
 *
 *      <uiLeft>
 *
 *      <uiBottom>
 *
 *      <uiRight>
 *
 *      <pbyFrame>
 *
 *      <byAttr>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_Col()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_Col( void ) --> ( SHORT )sResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <sResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gt_DispBegin()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_DispBegin( void )
 *  $ARGUMENTS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_DispCount()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_DispCount( void ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gt_DispEnd()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_DispEnd( void )
 *  $ARGUMENTS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_GetBlink()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_GetBlink( void ) --> ( HB_BOOL )bResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_GetCursorStyle()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_GetCursorStyle( void ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_GetScreenHeight()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_GetScreenHeight( void ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_GetScreenWidth()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_GetScreenWidth( void ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gt_GetText()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_GetText( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, BYTE * pbyDst )
 *  $ARGUMENTS$
 *      <uiTop>
 *
 *      <uiLeft>
 *
 *      <uiBottom>
 *
 *      <uiRight>
 *
 *      <pbyDst>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_HorizLine()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_HorizLine( USHORT uiRow, USHORT uiLeft, USHORT uiRight, BYTE byChar, BYTE byAttr ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <uiRow>
 *
 *      <uiLeft>
 *
 *      <uiRight>
 *
 *      <byChar>
 *
 *      <byAttr>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_IsColor()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_IsColor( void ) --> ( HB_BOOL )bResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_PreExt()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_PreExt( void ) --> ( HB_BOOL )bResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_PostExt()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_PostExt( void ) --> ( HB_BOOL )bResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_Suspend()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *      Suspend the terminal before the shell call
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_Suspend( void ) --> ( HB_BOOL )bResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_Resume()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *      Resume the terminal after the shell call
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_Resume( void ) --> ( HB_BOOL )bResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gt_Puts()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_Puts( USHORT uiRow, USHORT uiCol, BYTE byAttr, BYTE * pbyStr, ULONG ulLen )
 *  $ARGUMENTS$
 *      <uiRow>
 *
 *      <uiCol>
 *
 *      <byAttr>
 *
 *      <pbyStr>
 *
 *      <ulLen>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gt_PutText()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_PutText( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, BYTE * pbySrc )
 *  $ARGUMENTS$
 *      <uiTop>
 *
 *      <uiLeft>
 *
 *      <uiBottom>
 *
 *      <uiRight>
 *
 *      <pbySrc>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_ReadKey()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_ReadKey( HB_inkey_enum eventmask ) --> ( int )iResult
 *  $ARGUMENTS$
 *      <eventmask>
 *  $RETURNS$
 *      <iResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_RectSize()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_RectSize( USHORT rows, USHORT cols ) --> ( int )iResult
 *  $ARGUMENTS$
 *      <rows>
 *
 *      <cols>
 *  $RETURNS$
 *      <iResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gt_Replicate()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_Replicate( USHORT uiTop, USHORT uiLeft, BYTE byAttr, BYTE byChar, ULONG ulLen )
 *  $ARGUMENTS$
 *      <uiTop>
 *
 *      <uiLeft>
 *
 *      <byAttr>
 *
 *      <byChar>
 *
 *      <ulLen>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_Row()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_Row( void ) --> ( SHORT )sResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <sResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gt_Scroll()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_Scroll( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, BYTE byAttr, SHORT iRows, SHORT iCols )
 *  $ARGUMENTS$
 *      <uiTop>
 *
 *      <uiLeft>
 *
 *      <uiBottom>
 *
 *      <uiRight>
 *
 *      <byAttr>
 *
 *      <iRows>
 *
 *      <iCols>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gt_SetAttribute()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_SetAttribute( USHORT uiTop, USHORT uiLeft, USHORT uiBottom, USHORT uiRight, BYTE byAttr )
 *  $ARGUMENTS$
 *      <uiTop>
 *
 *      <uiLeft>
 *
 *      <uiBottom>
 *
 *      <uiRight>
 *
 *      <byAttr>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gt_SetBlink()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_SetBlink( HB_BOOL bBlink )
 *  $ARGUMENTS$
 *      <bBlink>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gt_SetCursorStyle()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_SetCursorStyle( USHORT uiCursorShape )
 *  $ARGUMENTS$
 *      <uiCursorShape>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_SetMode()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_SetMode( USHORT uiRows, USHORT uiCols ) --> ( HB_BOOL )bResult
 *  $ARGUMENTS$
 *      <uiRows>
 *
 *      <uiCols>
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gt_SetPos()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_SetPos( SHORT iRow, SHORT iCol, SHORT iMethod )
 *  $ARGUMENTS$
 *      <iRow>
 *
 *      <iCol>
 *
 *      <iMethod>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_gt_Tone()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_Tone( double dFrequency, double dDuration )
 *  $ARGUMENTS$
 *      <dFrequency>
 *
 *      <dDuration>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_Version()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_Version( void ) --> ( char * )pszResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <pszResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_gt_VertLine()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_gt_VertLine( USHORT uiCol, USHORT uiTop, USHORT uiBottom, BYTE byChar, BYTE byAttr ) --> ( USHORT )usResult
 *  $ARGUMENTS$
 *      <uiCol>
 *
 *      <uiTop>
 *
 *      <uiBottom>
 *
 *      <byChar>
 *
 *      <byAttr>
 *  $RETURNS$
 *      <usResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_inkey()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *      Wait for keyboard input
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_inkey( HB_BOOL bWait, double dSeconds, HB_inkey_enum event_mask ) --> ( int )iResult
 *  $ARGUMENTS$
 *      <bWait>
 *
 *      <dSeconds>
 *
 *      <event_mask>
 *  $RETURNS$
 *      <iResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_inkeyGet()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *      Extract the next key from the Harbour keyboard buffer
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_inkeyGet( void ) --> ( int )iResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <iResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_inkeyPut()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *      Inserts an inkey code into the keyboard buffer
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_inkeyPut( int ch )
 *  $ARGUMENTS$
 *      <ch>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_inkeyLast()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *      Return the value of the last key that was extracted
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_inkeyLast( void ) --> ( int )iResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <iResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_inkeyNext()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *      Return the next key without extracting it
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_inkeyNext( void ) --> ( int )iResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <iResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_inkeyPoll()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *      Poll the console keyboard to stuff the Harbour buffer
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_inkeyPoll( void )
 *  $ARGUMENTS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_inkeyReset()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *      Reset the Harbour keyboard buffer
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_inkeyReset( HB_BOOL allocate )
 *  $ARGUMENTS$
 *      <allocate>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_mouseIsPresent()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouseIsPresent( void ) --> ( HB_BOOL )bResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_mouseGetCursor()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouseGetCursor( void ) --> ( HB_BOOL )bResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_mouseSetCursor()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouseSetCursor( HB_BOOL bVisible )
 *  $ARGUMENTS$
 *      <bVisible>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_mouseCol()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouseCol( void ) --> ( int )iResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <iResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_mouseRow()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouseRow( void ) --> ( int )iResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <iResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_mouseSetPos()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouseSetPos( int iRow, int iCol )
 *  $ARGUMENTS$
 *      <iRow>
 *
 *      <iCol>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_mouseIsButtonPressed()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouseIsButtonPressed( int iButton ) --> ( HB_BOOL )bResult
 *  $ARGUMENTS$
 *      <iButton>
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_mouseCountButton()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouseCountButton( void ) --> ( int )iResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <iResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_mouseSetBounds()
 *  $CATEGORY$
 *      C level API
 *  $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouseSetBounds( int iTop, int iLeft, int iBottom, int iRight )
 *  $ARGUMENTS$
 *      <iTop>
 *
 *      <iLeft>
 *
 *      <iBottom>
 *
 *      <iRight>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_mouseGetBounds()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouseGetBounds( int * piTop, int * piLeft, int * piBottom, int * piRight )
 *  $ARGUMENTS$
 *      <piTop>
 *
 *      <piLeft>
 *
 *      <piBottom>
 *
 *      <piRight>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_mouse_Init()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouse_Init( void )
 *  $ARGUMENTS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_mouse_Exit()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouse_Exit( void )
 *  $ARGUMENTS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_mouse_IsPresent()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouse_IsPresent( void ) --> ( HB_BOOL )bResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_mouse_Show()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouse_Show( void )
 *  $ARGUMENTS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_mouse_Hide()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouse_Hide( void )
 *  $ARGUMENTS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_mouse_Col()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouse_Col( void ) --> ( int )iResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <iResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_mouse_Row()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouse_Row( void ) --> ( int )iResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <iResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_mouse_SetPos()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouse_SetPos( int iRow, int iCol )
 *  $ARGUMENTS$
 *      <iRow>
 *
 *      <iCol>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_mouse_IsButtonPressed()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouse_IsButtonPressed( int iButton ) --> ( HB_BOOL )bResult
 *  $ARGUMENTS$
 *      <iButton>
 *  $RETURNS$
 *      <bResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Function
 *  $NAME$
 *      hb_mouse_CountButton()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouse_CountButton( void ) --> ( int )iResult
 *  $ARGUMENTS$
 *
 *  $RETURNS$
 *      <iResult>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_mouse_SetBounds()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouse_SetBounds( int iTop, int iLeft, int iBottom, int iRight )
 *  $ARGUMENTS$
 *      <iTop>
 *
 *      <iLeft>
 *
 *      <iBottom>
 *
 *      <iRight>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_mouse_GetBounds()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_mouse_GetBounds( int * piTop, int * piLeft, int * piBottom, int * piRight )
 *  $ARGUMENTS$
 *      <piTop>
 *
 *      <piLeft>
 *
 *      <piBottom>
 *
 *      <piRight>
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_setkeyInit()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_setkeyInit( void )
 *  $ARGUMENTS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */

/*  $DOC$
 *  $TEMPLATE$
 *      Procedure
 *  $NAME$
 *      hb_setkeyExit()
 *  $CATEGORY$
 *      C level API
 * $SUBCATEGORY$
 *    Terminal
 *  $ONELINER$
 *
 *  $SYNTAX$
 *      C Prototype
 *
 *      #include <hbapigt.h>
 *      hb_setkeyExit( void )
 *  $ARGUMENTS$
 *
 *  $DESCRIPTION$
 *
 *  $EXAMPLES$
 *
 *  $STATUS$
 *      R
 *  $COMPLIANCE$
 *      NA
 *  $FILES$
 *      Library is gt* (ie. gtdos)
 *  $PLATFORMS$
 *      All
 *  $SEEALSO$
 *
 *  $END$
 */
