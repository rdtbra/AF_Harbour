/* A Bison parser, made by GNU Bison 2.3.  */

/* Skeleton implementation for Bison's Yacc-like parsers in C

   Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
   Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor,
   Boston, MA 02110-1301, USA.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "2.3"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Using locations.  */
#define YYLSP_NEEDED 0

/* Substitute the variable and function names.  */
#define yyparse hb_macro_yyparse
#define yylex   hb_macro_yylex
#define yyerror hb_macro_yyerror
#define yylval  hb_macro_yylval
#define yychar  hb_macro_yychar
#define yydebug hb_macro_yydebug
#define yynerrs hb_macro_yynerrs


/* Tokens.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
   /* Put the tokens into the symbol table, so that GDB and other debuggers
      know about them.  */
   enum yytokentype {
     IDENTIFIER = 258,
     NIL = 259,
     NUM_DOUBLE = 260,
     INASSIGN = 261,
     NUM_LONG = 262,
     NUM_DATE = 263,
     TIMESTAMP = 264,
     IIF = 265,
     LITERAL = 266,
     TRUEVALUE = 267,
     FALSEVALUE = 268,
     AND = 269,
     OR = 270,
     NOT = 271,
     EQ = 272,
     NE1 = 273,
     NE2 = 274,
     INC = 275,
     DEC = 276,
     ALIASOP = 277,
     HASHOP = 278,
     SELF = 279,
     LE = 280,
     GE = 281,
     FIELD = 282,
     MACROVAR = 283,
     MACROTEXT = 284,
     PLUSEQ = 285,
     MINUSEQ = 286,
     MULTEQ = 287,
     DIVEQ = 288,
     POWER = 289,
     EXPEQ = 290,
     MODEQ = 291,
     EPSILON = 292,
     POST = 293,
     UNARY = 294,
     PRE = 295
   };
#endif
/* Tokens.  */
#define IDENTIFIER 258
#define NIL 259
#define NUM_DOUBLE 260
#define INASSIGN 261
#define NUM_LONG 262
#define NUM_DATE 263
#define TIMESTAMP 264
#define IIF 265
#define LITERAL 266
#define TRUEVALUE 267
#define FALSEVALUE 268
#define AND 269
#define OR 270
#define NOT 271
#define EQ 272
#define NE1 273
#define NE2 274
#define INC 275
#define DEC 276
#define ALIASOP 277
#define HASHOP 278
#define SELF 279
#define LE 280
#define GE 281
#define FIELD 282
#define MACROVAR 283
#define MACROTEXT 284
#define PLUSEQ 285
#define MINUSEQ 286
#define MULTEQ 287
#define DIVEQ 288
#define POWER 289
#define EXPEQ 290
#define MODEQ 291
#define EPSILON 292
#define POST 293
#define UNARY 294
#define PRE 295




/* Copy the first part of user declarations.  */
#line 6 "macro.y"

/*
 * $Id: macro.yyc 15369 2010-08-17 21:11:12Z vszakats $
 */

/*
 * Harbour Project source code:
 * Macro compiler YACC rules and actions
 *
 * Copyright 1999 Antonio Linares <alinares@fivetech.com>
 * www - http://harbour-project.org
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2, or (at your option)
 * any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 59 Temple Place, Suite 330,
 * Boston, MA 02111-1307 USA (or visit the web site http://www.gnu.org/).
 *
 * As a special exception, the Harbour Project gives permission for
 * additional uses of the text contained in its release of Harbour.
 *
 * The exception is that, if you link the Harbour libraries with other
 * files to produce an executable, this does not by itself cause the
 * resulting executable to be covered by the GNU General Public License.
 * Your use of that executable is in no way restricted on account of
 * linking the Harbour library code into it.
 *
 * This exception does not however invalidate any other reasons why
 * the executable file might be covered by the GNU General Public License.
 *
 * This exception applies only to the code released by the Harbour
 * Project under the name Harbour.  If you copy code from other
 * Harbour Project or Free Software Foundation releases into a copy of
 * Harbour, as the General Public License permits, the exception does
 * not apply to the code that you add in this way.  To avoid misleading
 * anyone as to the status of such modified files, you must delete
 * this exception notice from them.
 *
 * If you write modifications of your own for Harbour, it is your choice
 * whether to permit this exception to apply to your modifications.
 * If you do not wish that, delete this exception notice.
 *
 */

/* TODO list
 * 1) Change the pcode generated by ::cVar from Self:cVar to QSELF():cVar
 *    The major problem to solve is how to support QSELF() inside a codeblock.
 */

/* this #define HAVE TO be placed before all #include directives
 */
#define  HB_MACRO_SUPPORT

#include "hbmacro.h"
#include "hbcomp.h"
#include "hbdate.h"
#include "hbpp.h"

/* Compile using: bison -d -p hb_comp macro.y */

/* to pacify some warnings in BCC */
#if defined( __BORLANDC__ ) && !defined( __STDC__ )
#  define __STDC__
#endif

#undef alloca
#define alloca  hb_xgrab
#undef malloc
#define malloc  hb_xgrab
#undef realloc
#define realloc hb_xrealloc
#undef free
#define free    hb_xfree

/* NOTE: these symbols are used internally in bison.simple
 */
#undef YYFREE
#define YYFREE hb_xfree
#undef YYMALLOC
#define YYMALLOC hb_xgrab

#define NO_YYERROR

/* NOTE: these symbols are defined explicitly to pacify warnings */
#define YYENABLE_NLS          0
#define YYLTYPE_IS_TRIVIAL    0


/* yacc/lex related definitions
 */


/* Standard checking for valid expression creation
 */
#define HB_MACRO_CHECK( pExpr ) \
   if( ! ( HB_MACRO_DATA->status & HB_MACRO_CONT ) ) \
   { \
      YYABORT; \
   }

#define HB_MACRO_IFENABLED( pSet, pExpr, flag ) \
   if( HB_MACRO_DATA->supported & (flag) ) \
   { \
      pSet = (pExpr); \
   }\
   else \
   { \
      YYABORT; \
   }

#if defined( __BORLANDC__ ) || defined( __WATCOMC__ )
/* The if() inside this macro is always TRUE but it's used to hide BCC warning */
#define HB_MACRO_ABORT if( !( HB_MACRO_DATA->status & HB_MACRO_CONT ) ) { YYABORT; }
#else
#define HB_MACRO_ABORT { YYABORT; }
#endif



/* Enabling traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Enabling the token table.  */
#ifndef YYTOKEN_TABLE
# define YYTOKEN_TABLE 0
#endif

#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
typedef union YYSTYPE
#line 135 "macro.y"
{
   const char * string; /* to hold a string returned by lex */
   int       iNumber;   /* to hold a temporary integer number */
   HB_MAXINT lNumber;   /* to hold a temporary long number */
   void *    pVoid;     /* to hold any memory structure we may need */
   HB_EXPR_PTR asExpr;
   struct
   {
      const char * string;
      HB_SIZE      length;
   } valChar;
   struct
   {
      int      iNumber; /* to hold a number returned by lex */
   } valInteger;
   struct
   {
      HB_MAXINT lNumber; /* to hold a long number returned by lex */
      HB_UCHAR  bWidth;  /* to hold the width of the value */
   } valLong;
   struct
   {
      double   dNumber; /* to hold a double number returned by lex */
      HB_UCHAR bWidth;  /* to hold the width of the value */
      HB_UCHAR bDec;    /* to hold the number of decimal points in the value */
   } valDouble;
   struct
   {
      long     date;    /* to hold julian date */
      long     time;    /* to hold milliseconds */
   } valTimeStamp;
}
/* Line 187 of yacc.c.  */
#line 345 "macroy.c"
	YYSTYPE;
# define yystype YYSTYPE /* obsolescent; will be withdrawn */
# define YYSTYPE_IS_DECLARED 1
# define YYSTYPE_IS_TRIVIAL 1
#endif



/* Copy the second part of user declarations.  */
#line 168 "macro.y"

/* This must be placed after the above union - the union is
 * typedef-ined to YYSTYPE
 */
extern int  yylex( YYSTYPE *, HB_MACRO_PTR );   /* main lex token function, called by yyparse() */
extern int  yyparse( HB_MACRO_PTR );            /* main yacc parsing function */
extern void yyerror( HB_MACRO_PTR, const char * );    /* parsing error management function */



/* Line 216 of yacc.c.  */
#line 367 "macroy.c"

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#elif (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
typedef signed char yytype_int8;
#else
typedef short int yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(msgid) dgettext ("bison-runtime", msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(msgid) msgid
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(e) ((void) (e))
#else
# define YYUSE(e) /* empty */
#endif

/* Identity function, used to suppress warnings about constant conditions.  */
#ifndef lint
# define YYID(n) (n)
#else
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static int
YYID (int i)
#else
static int
YYID (i)
    int i;
#endif
{
  return i;
}
#endif

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#     ifndef _STDLIB_H
#      define _STDLIB_H 1
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's `empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined _STDLIB_H \
       && ! ((defined YYMALLOC || defined malloc) \
	     && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef _STDLIB_H
#    define _STDLIB_H 1
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
	 || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss;
  YYSTYPE yyvs;
  };

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

/* Copy COUNT objects from FROM to TO.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(To, From, Count) \
      __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
#  else
#   define YYCOPY(To, From, Count)		\
      do					\
	{					\
	  YYSIZE_T yyi;				\
	  for (yyi = 0; yyi < (Count); yyi++)	\
	    (To)[yyi] = (From)[yyi];		\
	}					\
      while (YYID (0))
#  endif
# endif

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack)					\
    do									\
      {									\
	YYSIZE_T yynewbytes;						\
	YYCOPY (&yyptr->Stack, Stack, yysize);				\
	Stack = &yyptr->Stack;						\
	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
	yyptr += yynewbytes / sizeof (*yyptr);				\
      }									\
    while (YYID (0))

#endif

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  102
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   1272

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  61
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  70
/* YYNRULES -- Number of rules.  */
#define YYNRULES  208
/* YYNRULES -- Number of states.  */
#define YYNSTATES  298

/* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   295

#define YYTRANSLATE(YYX)						\
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
static const yytype_uint8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,    42,    47,    50,     2,
      55,    56,    45,    43,    52,    44,     2,    46,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,    57,     2,
      40,    39,    41,     2,    51,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,    59,     2,    58,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,    53,    60,    54,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    48,    49
};

#if YYDEBUG
/* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
   YYRHS.  */
static const yytype_uint16 yyprhs[] =
{
       0,     0,     3,     5,     7,     9,    11,    13,    15,    17,
      20,    22,    24,    26,    28,    30,    34,    37,    41,    45,
      49,    55,    57,    60,    62,    64,    67,    70,    73,    76,
      80,    83,    86,    89,    92,    95,    97,    99,   101,   104,
     107,   110,   113,   116,   119,   122,   125,   128,   131,   134,
     137,   140,   143,   146,   149,   152,   155,   158,   161,   164,
     167,   170,   173,   176,   179,   182,   185,   188,   191,   194,
     199,   204,   210,   212,   216,   218,   220,   223,   226,   229,
     232,   235,   237,   239,   243,   245,   247,   249,   254,   256,
     258,   260,   262,   264,   266,   268,   270,   272,   274,   276,
     278,   280,   282,   284,   286,   288,   290,   292,   294,   296,
     298,   300,   302,   304,   306,   308,   310,   312,   314,   316,
     318,   320,   322,   323,   328,   330,   334,   335,   337,   339,
     341,   343,   345,   347,   349,   351,   353,   355,   357,   359,
     361,   363,   365,   367,   369,   371,   373,   375,   377,   379,
     381,   383,   385,   388,   391,   394,   397,   400,   403,   407,
     411,   415,   419,   423,   427,   431,   433,   435,   437,   439,
     441,   443,   447,   451,   455,   459,   463,   467,   471,   475,
     479,   483,   487,   491,   495,   499,   503,   507,   511,   514,
     517,   521,   526,   528,   532,   533,   541,   543,   547,   548,
     550,   552,   556,   558,   562,   565,   569,   572,   575
};

/* YYRHS -- A `-1'-separated list of the rules' RHS.  */
static const yytype_int16 yyrhs[] =
{
      62,     0,    -1,    97,    -1,   101,    -1,     1,    -1,     5,
      -1,     7,    -1,     8,    -1,     9,    -1,     7,    22,    -1,
       4,    -1,    11,    -1,    12,    -1,    13,    -1,    24,    -1,
      53,   121,    54,    -1,    71,   119,    -1,    53,    23,    54,
      -1,    53,    74,    54,    -1,    97,    23,   102,    -1,    74,
      52,    97,    23,   102,    -1,     3,    -1,     3,    22,    -1,
      28,    -1,    29,    -1,    77,    22,    -1,    50,   128,    -1,
      79,    22,    -1,    27,    22,    -1,    27,    22,    81,    -1,
      81,    76,    -1,    81,    66,    -1,    81,   129,    -1,    81,
      78,    -1,    81,    80,    -1,     3,    -1,    77,    -1,    79,
      -1,    66,    83,    -1,    78,    83,    -1,    80,    83,    -1,
     129,    83,    -1,    76,    83,    -1,    81,    83,    -1,    82,
      83,    -1,    66,   128,    -1,    76,   128,    -1,    78,   128,
      -1,    80,   128,    -1,   129,   128,    -1,    63,   119,    -1,
      67,   119,    -1,    64,   119,    -1,    65,   119,    -1,    68,
     119,    -1,   122,   119,    -1,    69,   119,    -1,    73,   119,
      -1,    70,   119,    -1,    75,   119,    -1,    84,   119,    -1,
      85,   119,    -1,    77,   119,    -1,    79,   119,    -1,    93,
     119,    -1,    95,   119,    -1,    87,   119,    -1,   130,   119,
      -1,   128,   119,    -1,     3,    55,    89,    56,    -1,    77,
      55,    89,    56,    -1,    51,     3,    55,    89,    56,    -1,
      92,    -1,    89,    52,    92,    -1,   102,    -1,    91,    -1,
      51,     3,    -1,    51,    77,    -1,    51,    84,    -1,    51,
      93,    -1,    51,    86,    -1,    37,    -1,    90,    -1,   103,
      57,    94,    -1,     3,    -1,    77,    -1,    79,    -1,    93,
      55,    89,    56,    -1,    63,    -1,    67,    -1,    64,    -1,
      65,    -1,    68,    -1,   122,    -1,    69,    -1,    70,    -1,
      71,    -1,    72,    -1,    73,    -1,    84,    -1,    85,    -1,
      77,    -1,    79,    -1,    75,    -1,    86,    -1,    87,    -1,
     130,    -1,    93,    -1,    95,    -1,   108,    -1,   115,    -1,
     105,    -1,   106,    -1,   107,    -1,   116,    -1,   117,    -1,
     118,    -1,    88,    -1,    96,    -1,   128,    -1,    37,    -1,
      97,    -1,    -1,   102,    52,   100,   102,    -1,    99,    -1,
     101,    52,   102,    -1,    -1,    97,    -1,    63,    -1,    67,
      -1,    64,    -1,    65,    -1,    68,    -1,   122,    -1,    69,
      -1,    70,    -1,    71,    -1,    72,    -1,    73,    -1,    84,
      -1,    85,    -1,    77,    -1,    79,    -1,    75,    -1,    86,
      -1,   128,    -1,    87,    -1,   130,    -1,    93,    -1,    95,
      -1,    20,    -1,    21,    -1,   103,   104,    -1,    20,    97,
      -1,    21,    97,    -1,    16,    97,    -1,    44,    97,    -1,
      43,    97,    -1,   103,     6,    97,    -1,   103,    30,    97,
      -1,   103,    31,    97,    -1,   103,    32,    97,    -1,   103,
      33,    97,    -1,   103,    36,    97,    -1,   103,    35,    97,
      -1,   109,    -1,   110,    -1,   111,    -1,   112,    -1,   113,
      -1,   114,    -1,    97,    43,    97,    -1,    97,    44,    97,
      -1,    97,    45,    97,    -1,    97,    46,    97,    -1,    97,
      47,    97,    -1,    97,    34,    97,    -1,    97,    14,    97,
      -1,    97,    15,    97,    -1,    97,    17,    97,    -1,    97,
      40,    97,    -1,    97,    41,    97,    -1,    97,    25,    97,
      -1,    97,    26,    97,    -1,    97,    18,    97,    -1,    97,
      19,    97,    -1,    97,    42,    97,    -1,    97,    39,    97,
      -1,   120,    58,    -1,    59,    98,    -1,   120,    52,    98,
      -1,   120,    58,    59,    98,    -1,    92,    -1,   121,    52,
      92,    -1,    -1,    53,    60,   123,   125,    60,   124,    54,
      -1,    97,    -1,   124,    52,    97,    -1,    -1,    37,    -1,
     126,    -1,   126,    52,    37,    -1,     3,    -1,   126,    52,
       3,    -1,    55,   102,    -1,   127,    52,   102,    -1,   127,
      56,    -1,   128,    22,    -1,    10,    55,    97,    52,    90,
      52,    90,    56,    -1
};

/* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   252,   252,   262,   270,   279,   280,   283,   286,   289,
     294,   299,   304,   305,   310,   315,   320,   325,   326,   329,
     330,   336,   339,   344,   347,   366,   371,   374,   381,   382,
     387,   388,   389,   390,   391,   394,   395,   396,   399,   400,
     401,   402,   403,   404,   405,   414,   415,   416,   417,   418,
     423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
     433,   434,   435,   436,   437,   438,   439,   440,   441,   446,
     449,   454,   464,   465,   468,   469,   472,   473,   474,   475,
     476,   479,   480,   485,   488,   489,   490,   495,   499,   500,
     501,   502,   503,   504,   505,   506,   507,   508,   509,   510,
     511,   512,   513,   514,   515,   516,   517,   518,   519,   520,
     521,   522,   523,   524,   525,   526,   527,   528,   531,   532,
     535,   536,   539,   539,   553,   554,   558,   559,   562,   563,
     564,   565,   566,   567,   568,   569,   570,   571,   572,   573,
     574,   575,   576,   577,   578,   579,   580,   581,   582,   583,
     589,   590,   596,   599,   600,   603,   604,   605,   608,   611,
     614,   617,   620,   623,   626,   629,   630,   631,   632,   633,
     634,   637,   638,   639,   640,   641,   642,   645,   646,   649,
     650,   651,   652,   653,   654,   655,   656,   657,   660,   666,
     667,   668,   671,   672,   676,   675,   683,   684,   689,   690,
     691,   692,   695,   696,   699,   700,   703,   706,   710
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENTIFIER", "NIL", "NUM_DOUBLE",
  "INASSIGN", "NUM_LONG", "NUM_DATE", "TIMESTAMP", "IIF", "LITERAL",
  "TRUEVALUE", "FALSEVALUE", "AND", "OR", "NOT", "EQ", "NE1", "NE2", "INC",
  "DEC", "ALIASOP", "HASHOP", "SELF", "LE", "GE", "FIELD", "MACROVAR",
  "MACROTEXT", "PLUSEQ", "MINUSEQ", "MULTEQ", "DIVEQ", "POWER", "EXPEQ",
  "MODEQ", "EPSILON", "POST", "'='", "'<'", "'>'", "'$'", "'+'", "'-'",
  "'*'", "'/'", "'%'", "UNARY", "PRE", "'&'", "'@'", "','", "'{'", "'}'",
  "'('", "')'", "':'", "']'", "'['", "'|'", "$accept", "Main", "NumValue",
  "DateValue", "TimeStampValue", "NumAlias", "NilValue", "LiteralValue",
  "Logical", "SelfValue", "Array", "ArrayAt", "Hash", "HashList",
  "Variable", "VarAlias", "MacroVar", "MacroVarAlias", "MacroExpr",
  "MacroExprAlias", "FieldAlias", "FieldVarAlias", "AliasId", "AliasVar",
  "AliasExpr", "VariableAt", "FunCall", "FunRef", "ArgList", "Argument",
  "RefArgument", "ExtArgument", "ObjectData", "SendId", "ObjectMethod",
  "SimpleExpression", "Expression", "ExtExpression", "RootParamList", "@1",
  "AsParamList", "EmptyExpression", "LeftExpression", "PostOp",
  "ExprPostOp", "ExprPreOp", "ExprUnary", "ExprAssign", "ExprPlusEq",
  "ExprMinusEq", "ExprMultEq", "ExprDivEq", "ExprModEq", "ExprExpEq",
  "ExprOperEq", "ExprMath", "ExprBool", "ExprRelation", "ArrayIndex",
  "IndexList", "ElemList", "CodeBlock", "@2", "BlockExpList", "BlockVars",
  "BlockVarList", "ExpList", "PareExpList", "PareExpListAlias", "IfInline", 0
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
   token YYLEX-NUM.  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,    61,
      60,    62,    36,    43,    45,    42,    47,    37,   294,   295,
      38,    64,    44,   123,   125,    40,    41,    58,    93,    91,
     124
};
# endif

/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint8 yyr1[] =
{
       0,    61,    62,    62,    62,    63,    63,    64,    65,    66,
      67,    68,    69,    69,    70,    71,    72,    73,    73,    74,
      74,    75,    76,    77,    77,    78,    79,    80,    81,    81,
      82,    82,    82,    82,    82,    83,    83,    83,    84,    84,
      84,    84,    84,    84,    84,    85,    85,    85,    85,    85,
      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
      86,    86,    86,    86,    86,    86,    86,    86,    86,    87,
      87,    88,    89,    89,    90,    90,    91,    91,    91,    91,
      91,    92,    92,    93,    94,    94,    94,    95,    96,    96,
      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    96,    96,    96,    96,    96,    96,    96,    96,    96,
      96,    96,    96,    96,    96,    96,    96,    96,    97,    97,
      98,    98,   100,    99,   101,   101,   102,   102,   103,   103,
     103,   103,   103,   103,   103,   103,   103,   103,   103,   103,
     103,   103,   103,   103,   103,   103,   103,   103,   103,   103,
     104,   104,   105,   106,   106,   107,   107,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   115,   115,   115,   115,
     115,   116,   116,   116,   116,   116,   116,   117,   117,   118,
     118,   118,   118,   118,   118,   118,   118,   118,   119,   120,
     120,   120,   121,   121,   123,   122,   124,   124,   125,   125,
     125,   125,   126,   126,   127,   127,   128,   129,   130
};

/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     1,     1,     1,     1,     1,     1,     2,
       1,     1,     1,     1,     1,     3,     2,     3,     3,     3,
       5,     1,     2,     1,     1,     2,     2,     2,     2,     3,
       2,     2,     2,     2,     2,     1,     1,     1,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     4,
       4,     5,     1,     3,     1,     1,     2,     2,     2,     2,
       2,     1,     1,     3,     1,     1,     1,     4,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     0,     4,     1,     3,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     2,     2,     2,     2,     2,     2,     3,     3,
       3,     3,     3,     3,     3,     1,     1,     1,     1,     1,
       1,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
       3,     4,     1,     3,     0,     7,     1,     3,     0,     1,
       1,     3,     1,     3,     2,     3,     2,     2,     8
};

/* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
   STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
   means the default is an error.  */
static const yytype_uint8 yydefact[] =
{
       0,     4,    21,    10,     5,     6,     7,     8,     0,    11,
      12,    13,     0,     0,     0,    14,     0,    23,    24,     0,
       0,     0,     0,   126,   126,     0,    88,    90,    91,     0,
      89,    92,    94,    95,    96,    97,    98,   103,     0,   101,
       0,   102,     0,     0,     0,    99,   100,   104,   105,   117,
     107,   108,   118,     2,   124,     3,     0,     0,   111,   112,
     113,   109,   165,   166,   167,   168,   169,   170,   110,   114,
     115,   116,    93,     0,   119,     0,   106,    22,   126,     9,
       0,   155,   153,   154,    28,   157,   156,    26,     0,     0,
      81,     0,   194,     0,    82,    75,   192,   127,    74,     0,
     127,   204,     1,     0,    50,     0,    52,    53,    35,    36,
      37,    38,    45,    51,    54,    56,    58,    16,    57,    59,
      42,    46,    25,   126,    62,    39,    47,    27,    63,    40,
      48,    35,     0,    31,    30,    36,    33,    37,    34,    43,
       0,    32,    44,    60,    61,    66,   126,    64,    65,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   126,   122,     0,   150,
     151,     0,     0,     0,     0,     0,     0,     0,   152,    55,
     126,   206,   207,    68,    41,    49,    67,     0,    72,     0,
      29,   126,    17,    76,   128,   130,   131,   129,   132,   134,
     135,   136,   137,   138,   143,    77,   142,    78,   140,    80,
     146,    79,   149,     0,   133,   145,   147,   198,     0,    18,
     126,   126,    15,   120,   121,   189,     0,   188,     0,     0,
     177,   178,   179,   184,   185,   182,   183,   176,   187,   180,
     181,   186,   171,   172,   173,   174,   175,   125,   126,   158,
     159,   160,   161,   162,   164,   163,    84,    85,    86,    83,
     205,   126,    69,   126,     0,   126,   202,   199,     0,   200,
       0,    19,   193,   190,     0,    70,    87,   123,    73,     0,
      71,     0,     0,     0,   126,   191,   126,    71,   196,     0,
     203,   201,    20,     0,     0,   195,   208,   197
};

/* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    93,    37,    38,    39,    40,    41,    42,
      43,    44,   111,    45,    46,    47,    48,    49,   187,    94,
      95,   188,    50,   259,    51,    52,   100,   225,    54,   248,
      55,    98,    57,   178,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,   104,   105,
      99,    72,   217,   289,   268,   269,    73,    74,    75,    76
};

/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
   STATE-NUM.  */
#define YYPACT_NINF -260
static const yytype_int16 yypact[] =
{
     346,  -260,   -15,  -260,  -260,   -12,  -260,  -260,   -38,  -260,
    -260,  -260,   843,   843,   843,  -260,    -4,  -260,  -260,   843,
     843,   -31,    32,   288,   843,    42,   437,   454,   471,     5,
     489,   506,   523,   541,   558,   959,   575,   593,     5,   172,
       5,   372,     5,     2,     8,   610,   627,   976,   645,  -260,
     389,   662,  -260,  1020,  -260,    15,    30,   994,  -260,  -260,
    -260,  -260,  -260,  -260,  -260,  -260,  -260,  -260,  -260,  -260,
    -260,  -260,   679,    70,   406,     5,   697,  -260,   737,  -260,
     843,  1225,  -260,  -260,    58,  -260,  -260,  -260,    -7,    14,
    -260,   949,  -260,    46,  -260,  -260,  -260,  1092,  -260,    87,
    1160,  -260,  -260,   790,  -260,   -37,  -260,  -260,  -260,  -260,
    -260,  -260,  -260,  -260,  -260,  -260,  -260,  -260,  -260,  -260,
    -260,  -260,  -260,   737,  -260,  -260,  -260,  -260,  -260,  -260,
    -260,    51,   -12,  -260,  -260,    77,  -260,    83,  -260,  -260,
      88,  -260,  -260,  -260,  -260,  -260,   737,  -260,  -260,   843,
     843,   843,   843,   843,   843,   843,   843,   843,   843,   843,
     843,   843,   843,   843,   843,   843,   843,  -260,   843,  -260,
    -260,   843,   843,   843,   843,   843,   843,    41,  -260,  -260,
     843,  -260,  -260,  -260,  -260,  -260,  -260,    73,  -260,  1056,
    -260,   737,  -260,    -6,    64,    64,    64,    64,    64,    64,
      64,    64,  -260,    64,    64,    17,     7,   138,    64,    90,
      64,    22,    64,    91,    64,    16,    64,    19,   843,  -260,
     843,   737,  -260,  -260,  1160,  -260,   790,    68,    84,   127,
    1194,  1160,  1225,  1225,  1225,   835,   835,   100,  1225,   835,
     835,   835,    74,    74,    97,    97,    97,  -260,   843,  1160,
    1160,  1160,  1160,  1160,  1160,  1160,  -260,  -260,  -260,  -260,
    -260,   737,  -260,   896,   132,   737,  -260,  -260,   106,   117,
    1126,  -260,  -260,  -260,   790,  -260,  -260,  -260,  -260,   125,
    -260,   133,   843,    25,   843,  -260,   896,   142,  1160,   157,
    -260,  -260,  -260,   126,   843,  -260,  -260,  1160
};

/* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
    -260,  -260,    96,    99,   105,   148,   115,   119,   121,   122,
     123,   124,   128,  -260,   129,   173,     3,   174,    21,   179,
     139,  -260,    71,   134,   137,   141,   143,  -260,  -120,  -259,
    -260,   -21,   144,  -260,   145,  -260,     0,  -220,  -260,  -260,
    -260,     1,   146,  -260,  -260,  -260,  -260,  -260,  -260,  -260,
    -260,  -260,  -260,  -260,  -260,  -260,  -260,  -260,    56,  -260,
    -260,   147,  -260,  -260,  -260,  -260,  -260,    95,   181,   150
};

/* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
   positive, shift that token.  If negative, reduce the rule which
   number is the opposite.  If zero, do what YYDEFACT says.
   If YYTABLE_NINF, syntax error.  */
#define YYTABLE_NINF -150
static const yytype_int16 yytable[] =
{
      53,    56,    96,   228,   279,   131,   273,    77,   108,   132,
      79,   108,    81,    82,    83,   226,    77,    80,    84,    85,
      86,   227,   266,    97,    24,   101,   229,   293,   290,   127,
      17,    18,   109,    17,    18,    88,    17,    18,   182,   122,
      78,   109,   102,   109,   256,   109,   135,   109,   191,   265,
     110,   -21,    21,   -21,   285,    21,   267,    24,    21,   110,
      24,   110,   291,   110,   137,   110,   103,   166,   192,    17,
      18,   264,   123,    77,  -141,   103,   103,   146,   109,  -148,
     189,   103,   167,   106,   107,    16,   113,   114,   115,   116,
     117,    21,   118,   119,   205,   124,   110,   128,   218,   122,
     219,   143,   144,   224,   145,   127,   147,   148,   156,   120,
     182,   125,   206,   129,   139,   142,    87,   161,   162,   163,
     164,   165,   180,   103,   112,   261,   181,   274,   179,   262,
     183,   156,   186,   121,   156,   126,   261,   130,   140,   221,
     275,   222,   163,   164,   165,   281,   184,  -144,   177,   230,
     231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
     241,   242,   243,   244,   245,   246,   282,   247,   249,   283,
     185,   250,   251,   252,   253,   254,   255,   286,  -141,   261,
     257,   260,   296,   276,   261,   261,   215,   194,   280,   287,
     195,   133,  -141,  -141,   122,  -139,   196,   103,   258,   -69,
     272,   -69,  -141,  -141,  -141,  -141,   197,  -141,  -141,   294,
     198,   295,   199,   200,   201,   202,   134,   136,   270,   203,
     204,   271,   138,   190,   141,   207,   224,   123,   208,  -141,
       0,   103,   209,     0,   210,   211,   212,   213,   214,     0,
     278,   216,     0,     0,     0,     0,     0,     0,     0,   277,
       0,   106,   107,   113,   114,   115,   116,   117,     0,   118,
     119,   124,   128,   143,   144,     0,   145,   147,   148,     0,
     179,   183,   186,     0,   224,     0,     0,     0,     0,     0,
       0,     0,   288,     0,     0,   292,     0,     0,     0,     0,
       0,     2,     3,     4,   297,     5,     6,     7,     8,     9,
      10,    11,     0,     0,    12,     0,     0,     0,    13,    14,
       0,    89,    15,     0,     0,    16,    17,    18,     0,     0,
       0,     0,     0,     0,     0,    90,     0,     0,     0,     0,
       0,    19,    20,     0,     0,     0,     0,     0,    21,    91,
       0,    23,     0,    24,     0,     0,     0,     1,    92,     2,
       3,     4,     0,     5,     6,     7,     8,     9,    10,    11,
       0,     0,    12,     0,     0,     0,    13,    14,     0,     0,
      15,     0,     0,    16,    17,    18,     0,     0,  -142,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    19,
      20,     0,  -142,  -142,   127,  -148,    21,    22,  -126,    23,
       0,    24,  -142,  -142,  -142,  -142,     0,  -142,  -142,  -148,
    -148,     0,  -145,     0,     0,     0,     0,     0,     0,  -148,
    -148,  -148,  -148,     0,  -148,  -148,  -145,  -145,   182,  -142,
       0,   103,     0,     0,     0,     0,  -145,  -145,  -145,  -145,
       0,  -145,  -145,  -128,   146,     0,  -148,     0,   103,     0,
       0,     0,     0,     0,     0,     0,     0,  -128,  -128,     0,
    -130,     0,     0,  -145,     0,   103,     0,  -128,  -128,  -128,
    -128,     0,  -128,  -128,  -130,  -130,     0,  -131,     0,     0,
       0,     0,     0,     0,  -130,  -130,  -130,  -130,     0,  -130,
    -130,  -131,  -131,     0,  -128,  -129,   103,     0,     0,     0,
       0,  -131,  -131,  -131,  -131,     0,  -131,  -131,     0,  -129,
    -129,  -130,  -132,   103,     0,     0,     0,     0,     0,  -129,
    -129,  -129,  -129,     0,  -129,  -129,  -132,  -132,  -131,  -134,
     103,     0,     0,     0,     0,     0,  -132,  -132,  -132,  -132,
       0,  -132,  -132,  -134,  -134,     0,  -129,  -135,   103,     0,
       0,     0,     0,  -134,  -134,  -134,  -134,     0,  -134,  -134,
       0,  -135,  -135,  -132,  -136,   103,     0,     0,     0,     0,
       0,  -135,  -135,  -135,  -135,     0,  -135,  -135,  -136,  -136,
    -134,  -138,   103,     0,     0,     0,     0,     0,  -136,  -136,
    -136,  -136,     0,  -136,  -136,  -138,  -138,     0,  -135,  -143,
     103,     0,     0,     0,     0,  -138,  -138,  -138,  -138,     0,
    -138,  -138,     0,  -143,  -143,  -136,  -139,   103,     0,     0,
       0,     0,     0,  -143,  -143,  -143,  -143,     0,  -143,  -143,
    -139,  -139,  -138,  -140,   103,     0,     0,     0,     0,     0,
    -139,  -139,  -139,  -139,     0,  -139,  -139,  -140,  -140,     0,
    -143,  -146,   103,     0,     0,     0,     0,  -140,  -140,  -140,
    -140,     0,  -140,  -140,     0,  -146,  -146,  -139,  -149,   103,
       0,     0,     0,     0,     0,  -146,  -146,  -146,  -146,     0,
    -146,  -146,  -149,  -149,  -140,  -133,   103,     0,     0,     0,
       0,     0,  -149,  -149,  -149,  -149,     0,  -149,  -149,  -133,
    -133,     0,  -146,  -147,   103,     0,     0,     0,     0,  -133,
    -133,  -133,  -133,     0,  -133,  -133,     0,  -147,  -147,  -149,
       0,   103,     0,     0,     0,     0,     0,  -147,  -147,  -147,
    -147,     0,  -147,  -147,     0,     0,  -133,     0,   103,     0,
       2,     3,     4,     0,     5,     6,     7,     8,     9,    10,
      11,     0,     0,    12,  -147,     0,   103,    13,    14,     0,
       0,    15,     0,     0,    16,    17,    18,     0,     0,     0,
       0,     0,     0,     0,    90,     0,     0,     0,     0,     0,
      19,    20,     0,     0,     0,     0,     0,    21,    91,     0,
      23,     0,    24,     2,     3,     4,     0,     5,     6,     7,
       8,     9,    10,    11,     0,     0,    12,     0,     0,     0,
      13,    14,     0,     0,    15,     0,     0,    16,    17,    18,
       0,     0,     0,     0,     0,     0,     0,   223,     0,     0,
       0,     0,     0,    19,    20,     0,     0,     0,     0,     0,
      21,    22,     0,    23,     0,    24,     2,     3,     4,     0,
       5,     6,     7,     8,     9,    10,    11,     0,     0,    12,
     154,   155,     0,    13,    14,     0,     0,    15,     0,   156,
      16,    17,    18,     0,     0,   158,   159,   160,   161,   162,
     163,   164,   165,     0,     0,     0,    19,    20,     0,     0,
       0,     0,     0,    21,    22,     0,    23,     0,    24,     2,
       3,     4,     0,     5,     6,     7,     8,     9,    10,    11,
       0,     0,    12,     0,     0,     0,    13,    14,     0,     0,
      15,     0,     0,    16,    17,    18,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,    19,
      20,     0,     0,     0,     0,     0,    21,    91,     0,    23,
       0,    24,   193,     3,     4,     0,     5,     6,     7,     8,
       9,    10,    11,     0,     0,  -137,     0,     0,     0,     0,
       0,     0,     0,    15,     0,     0,    16,    17,    18,  -137,
    -137,     0,  -144,     0,     0,     0,     0,     0,     0,  -137,
    -137,  -137,  -137,     0,  -137,  -137,  -144,  -144,     0,    21,
     168,     0,    23,     0,    24,     0,  -144,  -144,  -144,  -144,
       0,  -144,  -144,     0,   169,   170,  -137,     0,     0,     0,
       0,     0,     0,     0,   171,   172,   173,   174,     0,   175,
     176,     0,     0,  -144,   149,   150,     0,   151,   152,   153,
       0,     0,     0,     0,     0,   154,   155,     0,     0,     0,
       0,   177,     0,     0,   156,     0,     0,     0,     0,   157,
     158,   159,   160,   161,   162,   163,   164,   165,     0,     0,
     149,   150,  -127,   151,   152,   153,     0,     0,     0,     0,
       0,   154,   155,     0,     0,     0,     0,     0,     0,     0,
     156,     0,     0,     0,     0,   157,   158,   159,   160,   161,
     162,   163,   164,   165,     0,     0,   149,   150,   263,   151,
     152,   153,     0,     0,     0,   220,     0,   154,   155,     0,
       0,     0,     0,     0,     0,     0,   156,     0,     0,     0,
       0,   157,   158,   159,   160,   161,   162,   163,   164,   165,
     149,   150,     0,   151,   152,   153,     0,     0,     0,   284,
       0,   154,   155,     0,     0,     0,     0,     0,     0,     0,
     156,     0,     0,     0,     0,   157,   158,   159,   160,   161,
     162,   163,   164,   165,   149,   150,     0,   151,   152,   153,
       0,     0,     0,     0,     0,   154,   155,     0,     0,     0,
       0,     0,     0,     0,   156,     0,     0,     0,     0,   157,
     158,   159,   160,   161,   162,   163,   164,   165,   149,     0,
       0,   151,   152,   153,     0,     0,     0,     0,     0,   154,
     155,     0,     0,     0,     0,     0,     0,     0,   156,     0,
       0,     0,     0,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   151,   152,   153,     0,     0,     0,     0,     0,
     154,   155,     0,     0,     0,     0,     0,     0,     0,   156,
       0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
     163,   164,   165
};

static const yytype_int16 yycheck[] =
{
       0,     0,    23,   123,   263,     3,   226,    22,     3,     7,
      22,     3,    12,    13,    14,    52,    22,    55,    22,    19,
      20,    58,     3,    23,    55,    24,   146,   286,     3,    22,
      28,    29,    29,    28,    29,     3,    28,    29,    22,    22,
      55,    38,     0,    40,     3,    42,    43,    44,    55,    55,
      29,    57,    50,    59,   274,    50,    37,    55,    50,    38,
      55,    40,    37,    42,    43,    44,    59,    52,    54,    28,
      29,   191,    55,    22,    57,    59,    59,    55,    75,    57,
      80,    59,    52,    27,    28,    27,    30,    31,    32,    33,
      34,    50,    36,    37,    91,    39,    75,    41,    52,    22,
      54,    45,    46,   103,    48,    22,    50,    51,    34,    38,
      22,    40,    91,    42,    43,    44,    21,    43,    44,    45,
      46,    47,    52,    59,    29,    52,    56,    59,    72,    56,
      74,    34,    76,    38,    34,    40,    52,    42,    43,    52,
      56,    54,    45,    46,    47,   265,    75,    57,    57,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
     160,   161,   162,   163,   164,   165,    60,   166,   168,    52,
      75,   171,   172,   173,   174,   175,   176,    52,     6,    52,
     177,   180,    56,    56,    52,    52,    91,    91,    56,    56,
      91,    43,    20,    21,    22,    57,    91,    59,   177,    57,
     221,    59,    30,    31,    32,    33,    91,    35,    36,    52,
      91,    54,    91,    91,    91,    91,    43,    43,   218,    91,
      91,   220,    43,    84,    43,    91,   226,    55,    91,    57,
      -1,    59,    91,    -1,    91,    91,    91,    91,    91,    -1,
     261,    91,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   248,
      -1,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,    -1,   210,   211,   212,    -1,
     214,   215,   216,    -1,   274,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   282,    -1,    -1,   284,    -1,    -1,    -1,    -1,
      -1,     3,     4,     5,   294,     7,     8,     9,    10,    11,
      12,    13,    -1,    -1,    16,    -1,    -1,    -1,    20,    21,
      -1,    23,    24,    -1,    -1,    27,    28,    29,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,
      -1,    43,    44,    -1,    -1,    -1,    -1,    -1,    50,    51,
      -1,    53,    -1,    55,    -1,    -1,    -1,     1,    60,     3,
       4,     5,    -1,     7,     8,     9,    10,    11,    12,    13,
      -1,    -1,    16,    -1,    -1,    -1,    20,    21,    -1,    -1,
      24,    -1,    -1,    27,    28,    29,    -1,    -1,     6,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    20,    21,    22,     6,    50,    51,    52,    53,
      -1,    55,    30,    31,    32,    33,    -1,    35,    36,    20,
      21,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,    30,
      31,    32,    33,    -1,    35,    36,    20,    21,    22,    57,
      -1,    59,    -1,    -1,    -1,    -1,    30,    31,    32,    33,
      -1,    35,    36,     6,    55,    -1,    57,    -1,    59,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    -1,
       6,    -1,    -1,    57,    -1,    59,    -1,    30,    31,    32,
      33,    -1,    35,    36,    20,    21,    -1,     6,    -1,    -1,
      -1,    -1,    -1,    -1,    30,    31,    32,    33,    -1,    35,
      36,    20,    21,    -1,    57,     6,    59,    -1,    -1,    -1,
      -1,    30,    31,    32,    33,    -1,    35,    36,    -1,    20,
      21,    57,     6,    59,    -1,    -1,    -1,    -1,    -1,    30,
      31,    32,    33,    -1,    35,    36,    20,    21,    57,     6,
      59,    -1,    -1,    -1,    -1,    -1,    30,    31,    32,    33,
      -1,    35,    36,    20,    21,    -1,    57,     6,    59,    -1,
      -1,    -1,    -1,    30,    31,    32,    33,    -1,    35,    36,
      -1,    20,    21,    57,     6,    59,    -1,    -1,    -1,    -1,
      -1,    30,    31,    32,    33,    -1,    35,    36,    20,    21,
      57,     6,    59,    -1,    -1,    -1,    -1,    -1,    30,    31,
      32,    33,    -1,    35,    36,    20,    21,    -1,    57,     6,
      59,    -1,    -1,    -1,    -1,    30,    31,    32,    33,    -1,
      35,    36,    -1,    20,    21,    57,     6,    59,    -1,    -1,
      -1,    -1,    -1,    30,    31,    32,    33,    -1,    35,    36,
      20,    21,    57,     6,    59,    -1,    -1,    -1,    -1,    -1,
      30,    31,    32,    33,    -1,    35,    36,    20,    21,    -1,
      57,     6,    59,    -1,    -1,    -1,    -1,    30,    31,    32,
      33,    -1,    35,    36,    -1,    20,    21,    57,     6,    59,
      -1,    -1,    -1,    -1,    -1,    30,    31,    32,    33,    -1,
      35,    36,    20,    21,    57,     6,    59,    -1,    -1,    -1,
      -1,    -1,    30,    31,    32,    33,    -1,    35,    36,    20,
      21,    -1,    57,     6,    59,    -1,    -1,    -1,    -1,    30,
      31,    32,    33,    -1,    35,    36,    -1,    20,    21,    57,
      -1,    59,    -1,    -1,    -1,    -1,    -1,    30,    31,    32,
      33,    -1,    35,    36,    -1,    -1,    57,    -1,    59,    -1,
       3,     4,     5,    -1,     7,     8,     9,    10,    11,    12,
      13,    -1,    -1,    16,    57,    -1,    59,    20,    21,    -1,
      -1,    24,    -1,    -1,    27,    28,    29,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,    -1,
      43,    44,    -1,    -1,    -1,    -1,    -1,    50,    51,    -1,
      53,    -1,    55,     3,     4,     5,    -1,     7,     8,     9,
      10,    11,    12,    13,    -1,    -1,    16,    -1,    -1,    -1,
      20,    21,    -1,    -1,    24,    -1,    -1,    27,    28,    29,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    37,    -1,    -1,
      -1,    -1,    -1,    43,    44,    -1,    -1,    -1,    -1,    -1,
      50,    51,    -1,    53,    -1,    55,     3,     4,     5,    -1,
       7,     8,     9,    10,    11,    12,    13,    -1,    -1,    16,
      25,    26,    -1,    20,    21,    -1,    -1,    24,    -1,    34,
      27,    28,    29,    -1,    -1,    40,    41,    42,    43,    44,
      45,    46,    47,    -1,    -1,    -1,    43,    44,    -1,    -1,
      -1,    -1,    -1,    50,    51,    -1,    53,    -1,    55,     3,
       4,     5,    -1,     7,     8,     9,    10,    11,    12,    13,
      -1,    -1,    16,    -1,    -1,    -1,    20,    21,    -1,    -1,
      24,    -1,    -1,    27,    28,    29,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,
      44,    -1,    -1,    -1,    -1,    -1,    50,    51,    -1,    53,
      -1,    55,     3,     4,     5,    -1,     7,     8,     9,    10,
      11,    12,    13,    -1,    -1,     6,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    24,    -1,    -1,    27,    28,    29,    20,
      21,    -1,     6,    -1,    -1,    -1,    -1,    -1,    -1,    30,
      31,    32,    33,    -1,    35,    36,    20,    21,    -1,    50,
       6,    -1,    53,    -1,    55,    -1,    30,    31,    32,    33,
      -1,    35,    36,    -1,    20,    21,    57,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    30,    31,    32,    33,    -1,    35,
      36,    -1,    -1,    57,    14,    15,    -1,    17,    18,    19,
      -1,    -1,    -1,    -1,    -1,    25,    26,    -1,    -1,    -1,
      -1,    57,    -1,    -1,    34,    -1,    -1,    -1,    -1,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    -1,    -1,
      14,    15,    52,    17,    18,    19,    -1,    -1,    -1,    -1,
      -1,    25,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    -1,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    -1,    -1,    14,    15,    52,    17,
      18,    19,    -1,    -1,    -1,    23,    -1,    25,    26,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,
      -1,    39,    40,    41,    42,    43,    44,    45,    46,    47,
      14,    15,    -1,    17,    18,    19,    -1,    -1,    -1,    23,
      -1,    25,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      34,    -1,    -1,    -1,    -1,    39,    40,    41,    42,    43,
      44,    45,    46,    47,    14,    15,    -1,    17,    18,    19,
      -1,    -1,    -1,    -1,    -1,    25,    26,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    34,    -1,    -1,    -1,    -1,    39,
      40,    41,    42,    43,    44,    45,    46,    47,    14,    -1,
      -1,    17,    18,    19,    -1,    -1,    -1,    -1,    -1,    25,
      26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,
      -1,    -1,    -1,    39,    40,    41,    42,    43,    44,    45,
      46,    47,    17,    18,    19,    -1,    -1,    -1,    -1,    -1,
      25,    26,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
      -1,    -1,    -1,    -1,    39,    40,    41,    42,    43,    44,
      45,    46,    47
};

/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
   symbol of state STATE-NUM.  */
static const yytype_uint8 yystos[] =
{
       0,     1,     3,     4,     5,     7,     8,     9,    10,    11,
      12,    13,    16,    20,    21,    24,    27,    28,    29,    43,
      44,    50,    51,    53,    55,    62,    63,    64,    65,    66,
      67,    68,    69,    70,    71,    72,    73,    75,    76,    77,
      78,    79,    80,    81,    82,    84,    85,    86,    87,    88,
      93,    95,    96,    97,    99,   101,   102,   103,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
     117,   118,   122,   127,   128,   129,   130,    22,    55,    22,
      55,    97,    97,    97,    22,    97,    97,   128,     3,    23,
      37,    51,    60,    74,    90,    91,    92,    97,   102,   121,
      97,   102,     0,    59,   119,   120,   119,   119,     3,    77,
      79,    83,   128,   119,   119,   119,   119,   119,   119,   119,
      83,   128,    22,    55,   119,    83,   128,    22,   119,    83,
     128,     3,     7,    66,    76,    77,    78,    79,    80,    83,
     128,   129,    83,   119,   119,   119,    55,   119,   119,    14,
      15,    17,    18,    19,    25,    26,    34,    39,    40,    41,
      42,    43,    44,    45,    46,    47,    52,    52,     6,    20,
      21,    30,    31,    32,    33,    35,    36,    57,   104,   119,
      52,    56,    22,   119,    83,   128,   119,    89,    92,    97,
      81,    55,    54,     3,    63,    64,    65,    67,    68,    69,
      70,    71,    72,    73,    75,    77,    79,    84,    85,    86,
      87,    93,    95,   103,   122,   128,   130,   123,    52,    54,
      23,    52,    54,    37,    97,    98,    52,    58,    89,    89,
      97,    97,    97,    97,    97,    97,    97,    97,    97,    97,
      97,    97,    97,    97,    97,    97,    97,   102,   100,    97,
      97,    97,    97,    97,    97,    97,     3,    77,    79,    94,
     102,    52,    56,    52,    89,    55,     3,    37,   125,   126,
      97,   102,    92,    98,    59,    56,    56,   102,    92,    90,
      56,    89,    60,    52,    23,    98,    52,    56,    97,   124,
       3,    37,   102,    90,    52,    54,    56,    97
};

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		(-2)
#define YYEOF		0

#define YYACCEPT	goto yyacceptlab
#define YYABORT		goto yyabortlab
#define YYERROR		goto yyerrorlab


/* Like YYERROR except do call yyerror.  This remains here temporarily
   to ease the transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */

#define YYFAIL		goto yyerrlab

#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)					\
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    {								\
      yychar = (Token);						\
      yylval = (Value);						\
      yytoken = YYTRANSLATE (yychar);				\
      YYPOPSTACK (1);						\
      goto yybackup;						\
    }								\
  else								\
    {								\
      yyerror (pMacro, YY_("syntax error: cannot back up")); \
      YYERROR;							\
    }								\
while (YYID (0))


#define YYTERROR	1
#define YYERRCODE	256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#define YYRHSLOC(Rhs, K) ((Rhs)[K])
#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)				\
    do									\
      if (YYID (N))                                                    \
	{								\
	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
	}								\
      else								\
	{								\
	  (Current).first_line   = (Current).last_line   =		\
	    YYRHSLOC (Rhs, 0).last_line;				\
	  (Current).first_column = (Current).last_column =		\
	    YYRHSLOC (Rhs, 0).last_column;				\
	}								\
    while (YYID (0))
#endif


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if YYLTYPE_IS_TRIVIAL
#  define YY_LOCATION_PRINT(File, Loc)			\
     fprintf (File, "%d.%d-%d.%d",			\
	      (Loc).first_line, (Loc).first_column,	\
	      (Loc).last_line,  (Loc).last_column)
# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


/* YYLEX -- calling `yylex' with the right arguments.  */

#ifdef YYLEX_PARAM
# define YYLEX yylex (&yylval, YYLEX_PARAM)
#else
# define YYLEX yylex (&yylval, pMacro)
#endif

/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)			\
do {						\
  if (yydebug)					\
    YYFPRINTF Args;				\
} while (YYID (0))

# define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
do {									  \
  if (yydebug)								  \
    {									  \
      YYFPRINTF (stderr, "%s ", Title);					  \
      yy_symbol_print (stderr,						  \
		  Type, Value, pMacro); \
      YYFPRINTF (stderr, "\n");						  \
    }									  \
} while (YYID (0))


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, HB_MACRO_PTR pMacro)
#else
static void
yy_symbol_value_print (yyoutput, yytype, yyvaluep, pMacro)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    HB_MACRO_PTR pMacro;
#endif
{
  if (!yyvaluep)
    return;
  YYUSE (pMacro);
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# else
  YYUSE (yyoutput);
# endif
  switch (yytype)
    {
      default:
	break;
    }
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, HB_MACRO_PTR pMacro)
#else
static void
yy_symbol_print (yyoutput, yytype, yyvaluep, pMacro)
    FILE *yyoutput;
    int yytype;
    YYSTYPE const * const yyvaluep;
    HB_MACRO_PTR pMacro;
#endif
{
  if (yytype < YYNTOKENS)
    YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
  else
    YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);

  yy_symbol_value_print (yyoutput, yytype, yyvaluep, pMacro);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
#else
static void
yy_stack_print (bottom, top)
    yytype_int16 *bottom;
    yytype_int16 *top;
#endif
{
  YYFPRINTF (stderr, "Stack now");
  for (; bottom <= top; ++bottom)
    YYFPRINTF (stderr, " %d", *bottom);
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)				\
do {								\
  if (yydebug)							\
    yy_stack_print ((Bottom), (Top));				\
} while (YYID (0))


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yy_reduce_print (YYSTYPE *yyvsp, int yyrule, HB_MACRO_PTR pMacro)
#else
static void
yy_reduce_print (yyvsp, yyrule, pMacro)
    YYSTYPE *yyvsp;
    int yyrule;
    HB_MACRO_PTR pMacro;
#endif
{
  int yynrhs = yyr2[yyrule];
  int yyi;
  unsigned long int yylno = yyrline[yyrule];
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
	     yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      fprintf (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
		       &(yyvsp[(yyi + 1) - (yynrhs)])
		       		       , pMacro);
      fprintf (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)		\
do {					\
  if (yydebug)				\
    yy_reduce_print (yyvsp, Rule, pMacro); \
} while (YYID (0))

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef	YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif



#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static YYSIZE_T
yystrlen (const char *yystr)
#else
static YYSIZE_T
yystrlen (yystr)
    const char *yystr;
#endif
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static char *
yystpcpy (char *yydest, const char *yysrc)
#else
static char *
yystpcpy (yydest, yysrc)
    char *yydest;
    const char *yysrc;
#endif
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
	switch (*++yyp)
	  {
	  case '\'':
	  case ',':
	    goto do_not_strip_quotes;

	  case '\\':
	    if (*++yyp != '\\')
	      goto do_not_strip_quotes;
	    /* Fall through.  */
	  default:
	    if (yyres)
	      yyres[yyn] = *yyp;
	    yyn++;
	    break;

	  case '"':
	    if (yyres)
	      yyres[yyn] = '\0';
	    return yyn;
	  }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into YYRESULT an error message about the unexpected token
   YYCHAR while in state YYSTATE.  Return the number of bytes copied,
   including the terminating null byte.  If YYRESULT is null, do not
   copy anything; just return the number of bytes that would be
   copied.  As a special case, return 0 if an ordinary "syntax error"
   message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
   size calculation.  */
static YYSIZE_T
yysyntax_error (char *yyresult, int yystate, int yychar)
{
  int yyn = yypact[yystate];

  if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
    return 0;
  else
    {
      int yytype = YYTRANSLATE (yychar);
      YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
      YYSIZE_T yysize = yysize0;
      YYSIZE_T yysize1;
      int yysize_overflow = 0;
      enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
      char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
      int yyx;

# if 0
      /* This is so xgettext sees the translatable formats that are
	 constructed on the fly.  */
      YY_("syntax error, unexpected %s");
      YY_("syntax error, unexpected %s, expecting %s");
      YY_("syntax error, unexpected %s, expecting %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s");
      YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
# endif
      char *yyfmt;
      char const *yyf;
      static char const yyunexpected[] = "syntax error, unexpected %s";
      static char const yyexpecting[] = ", expecting %s";
      static char const yyor[] = " or %s";
      char yyformat[sizeof yyunexpected
		    + sizeof yyexpecting - 1
		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
		       * (sizeof yyor - 1))];
      char const *yyprefix = yyexpecting;

      /* Start YYX at -YYN if negative to avoid negative indexes in
	 YYCHECK.  */
      int yyxbegin = yyn < 0 ? -yyn : 0;

      /* Stay within bounds of both yycheck and yytname.  */
      int yychecklim = YYLAST - yyn + 1;
      int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
      int yycount = 1;

      yyarg[0] = yytname[yytype];
      yyfmt = yystpcpy (yyformat, yyunexpected);

      for (yyx = yyxbegin; yyx < yyxend; ++yyx)
	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
	  {
	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
	      {
		yycount = 1;
		yysize = yysize0;
		yyformat[sizeof yyunexpected - 1] = '\0';
		break;
	      }
	    yyarg[yycount++] = yytname[yyx];
	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
	    yysize_overflow |= (yysize1 < yysize);
	    yysize = yysize1;
	    yyfmt = yystpcpy (yyfmt, yyprefix);
	    yyprefix = yyor;
	  }

      yyf = YY_(yyformat);
      yysize1 = yysize + yystrlen (yyf);
      yysize_overflow |= (yysize1 < yysize);
      yysize = yysize1;

      if (yysize_overflow)
	return YYSIZE_MAXIMUM;

      if (yyresult)
	{
	  /* Avoid sprintf, as that infringes on the user's name space.
	     Don't have undefined behavior even if the translation
	     produced a string with the wrong number of "%s"s.  */
	  char *yyp = yyresult;
	  int yyi = 0;
	  while ((*yyp = *yyf) != '\0')
	    {
	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
		{
		  yyp += yytnamerr (yyp, yyarg[yyi++]);
		  yyf += 2;
		}
	      else
		{
		  yyp++;
		  yyf++;
		}
	    }
	}
      return yysize;
    }
}
#endif /* YYERROR_VERBOSE */


/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

/*ARGSUSED*/
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, HB_MACRO_PTR pMacro)
#else
static void
yydestruct (yymsg, yytype, yyvaluep, pMacro)
    const char *yymsg;
    int yytype;
    YYSTYPE *yyvaluep;
    HB_MACRO_PTR pMacro;
#endif
{
  YYUSE (yyvaluep);
  YYUSE (pMacro);

  if (!yymsg)
    yymsg = "Deleting";
  YYUSE (yymsg);
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  switch (yytype)
    {

      default:
	break;
    }
}


/* Prevent warnings from -Wmissing-prototypes.  */

#ifdef YYPARSE_PARAM
#if defined __STDC__ || defined __cplusplus
int yyparse (void *YYPARSE_PARAM);
#else
int yyparse ();
#endif
#else /* ! YYPARSE_PARAM */
#if defined __STDC__ || defined __cplusplus
int yyparse (HB_MACRO_PTR pMacro);
#else
int yyparse ();
#endif
#endif /* ! YYPARSE_PARAM */






/*----------.
| yyparse.  |
`----------*/

#ifdef YYPARSE_PARAM
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (void *YYPARSE_PARAM)
#else
int
yyparse (YYPARSE_PARAM)
    void *YYPARSE_PARAM;
#endif
#else /* ! YYPARSE_PARAM */
#if (defined __STDC__ || defined __C99__FUNC__ \
     || defined __cplusplus || defined _MSC_VER)
int
yyparse (HB_MACRO_PTR pMacro)
#else
int
yyparse (pMacro)
    HB_MACRO_PTR pMacro;
#endif
#endif
{
  /* The look-ahead symbol.  */
int yychar;

/* The semantic value of the look-ahead symbol.  */
YYSTYPE yylval;

/* Number of syntax errors so far.  */
int yynerrs;

  int yystate;
  int yyn;
  int yyresult;
  /* Number of tokens to shift before error messages enabled.  */
  int yyerrstatus;
  /* Look-ahead token as an internal (translated) token number.  */
  int yytoken = 0;
#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

  /* Three stacks and their tools:
     `yyss': related to states,
     `yyvs': related to semantic values,
     `yyls': related to locations.

     Refer to the stacks thru separate pointers, to allow yyoverflow
     to reallocate them elsewhere.  */

  /* The state stack.  */
  yytype_int16 yyssa[YYINITDEPTH];
  yytype_int16 *yyss = yyssa;
  yytype_int16 *yyssp;

  /* The semantic value stack.  */
  YYSTYPE yyvsa[YYINITDEPTH];
  YYSTYPE *yyvs = yyvsa;
  YYSTYPE *yyvsp;



#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  YYSIZE_T yystacksize = YYINITDEPTH;

  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;


  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  YYDPRINTF ((stderr, "Starting parse\n"));

  memset(&yylval, 0, sizeof (yylval));
  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss;
  yyvsp = yyvs;

  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
	/* Give user a chance to reallocate the stack.  Use copies of
	   these so that the &'s don't force the real ones into
	   memory.  */
	YYSTYPE *yyvs1 = yyvs;
	yytype_int16 *yyss1 = yyss;


	/* Each stack pointer address is followed by the size of the
	   data in use in that stack, in bytes.  This used to be a
	   conditional around just the two extra args, but that might
	   be undefined if yyoverflow is a macro.  */
	yyoverflow (YY_("memory exhausted"),
		    &yyss1, yysize * sizeof (*yyssp),
		    &yyvs1, yysize * sizeof (*yyvsp),

		    &yystacksize);

	yyss = yyss1;
	yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
	goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
	yystacksize = YYMAXDEPTH;

      {
	yytype_int16 *yyss1 = yyss;
	union yyalloc *yyptr =
	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
	if (! yyptr)
	  goto yyexhaustedlab;
	YYSTACK_RELOCATE (yyss);
	YYSTACK_RELOCATE (yyvs);
	YYUSE (yyptr);

#  undef YYSTACK_RELOCATE
	if (yyss1 != yyssa)
	  YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;


      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
		  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
	YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     look-ahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to look-ahead token.  */
  yyn = yypact[yystate];
  if (yyn == YYPACT_NINF)
    goto yydefault;

  /* Not known => get a look-ahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = YYLEX;
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yyn == 0 || yyn == YYTABLE_NINF)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the look-ahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  yystate = yyn;
  *++yyvsp = yylval;

  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     `$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 252 "macro.y"
    {
                           HB_MACRO_DATA->exprType = hb_compExprType( (yyvsp[(1) - (1)].asExpr) );
                           if( HB_MACRO_DATA->Flags &  HB_MACRO_GEN_REFER )
                              hb_macroExprGenPush( hb_compExprNewRef( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ), HB_COMP_PARAM );
                           else if( HB_MACRO_DATA->Flags &  HB_MACRO_GEN_PUSH )
                              hb_macroExprGenPush( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM );
                           else
                              hb_macroExprGenPop( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM );
                           hb_macroGenPCode1( HB_P_ENDPROC, HB_COMP_PARAM );
                        ;}
    break;

  case 3:
#line 262 "macro.y"
    {
                           HB_MACRO_DATA->exprType = hb_compExprType( (yyvsp[(1) - (1)].asExpr) );
                           if( HB_MACRO_DATA->Flags &  HB_MACRO_GEN_PUSH )
                              hb_macroExprGenPush( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM );
                           else
                              hb_macroError( EG_SYNTAX, HB_COMP_PARAM );
                           hb_macroGenPCode1( HB_P_ENDPROC, HB_COMP_PARAM );
                        ;}
    break;

  case 4:
#line 270 "macro.y"
    {
                  HB_TRACE(HB_TR_DEBUG, ("macro -> invalid syntax: %s", HB_MACRO_DATA->string));
                  hb_macroError( EG_SYNTAX, HB_COMP_PARAM );
                  HB_MACRO_ABORT;
               ;}
    break;

  case 5:
#line 279 "macro.y"
    { (yyval.asExpr) = hb_compExprNewDouble( (yyvsp[(1) - (1)].valDouble).dNumber, (yyvsp[(1) - (1)].valDouble).bWidth, (yyvsp[(1) - (1)].valDouble).bDec, HB_COMP_PARAM ); ;}
    break;

  case 6:
#line 280 "macro.y"
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[(1) - (1)].valLong).lNumber, HB_COMP_PARAM ); ;}
    break;

  case 7:
#line 283 "macro.y"
    { (yyval.asExpr) = hb_compExprNewDate( ( long ) (yyvsp[(1) - (1)].valLong).lNumber, HB_COMP_PARAM ); ;}
    break;

  case 8:
#line 286 "macro.y"
    { (yyval.asExpr) = hb_compExprNewTimeStamp( (yyvsp[(1) - (1)].valTimeStamp).date, (yyvsp[(1) - (1)].valTimeStamp).time, HB_COMP_PARAM ); ;}
    break;

  case 9:
#line 289 "macro.y"
    { (yyval.asExpr) = hb_compExprNewLong( (yyvsp[(1) - (2)].valLong).lNumber, HB_COMP_PARAM ); ;}
    break;

  case 10:
#line 294 "macro.y"
    { (yyval.asExpr) = hb_compExprNewNil( HB_COMP_PARAM ); ;}
    break;

  case 11:
#line 299 "macro.y"
    { (yyval.asExpr) = hb_compExprNewString( (yyvsp[(1) - (1)].valChar).string, (yyvsp[(1) - (1)].valChar).length, HB_FALSE, HB_COMP_PARAM ); ;}
    break;

  case 12:
#line 304 "macro.y"
    { (yyval.asExpr) = hb_compExprNewLogical( HB_TRUE, HB_COMP_PARAM ); ;}
    break;

  case 13:
#line 305 "macro.y"
    { (yyval.asExpr) = hb_compExprNewLogical( HB_FALSE, HB_COMP_PARAM ); ;}
    break;

  case 14:
#line 310 "macro.y"
    { (yyval.asExpr) = hb_compExprNewSelf( HB_COMP_PARAM ); ;}
    break;

  case 15:
#line 315 "macro.y"
    { (yyval.asExpr) = hb_compExprNewArray( (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 16:
#line 320 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 17:
#line 325 "macro.y"
    { (yyval.asExpr) = hb_compExprNewHash( NULL, HB_COMP_PARAM ); ;}
    break;

  case 18:
#line 326 "macro.y"
    { (yyval.asExpr) = hb_compExprNewHash( (yyvsp[(2) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 19:
#line 329 "macro.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprNewList( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 20:
#line 330 "macro.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( hb_compExprAddListExpr( (yyvsp[(1) - (5)].asExpr), (yyvsp[(3) - (5)].asExpr) ), (yyvsp[(5) - (5)].asExpr) ); ;}
    break;

  case 21:
#line 336 "macro.y"
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 22:
#line 339 "macro.y"
    { (yyval.asExpr) = hb_compExprNewAlias( (yyvsp[(1) - (2)].string), HB_COMP_PARAM ); ;}
    break;

  case 23:
#line 344 "macro.y"
    {  (yyval.asExpr) = hb_compExprNewMacro( NULL, '&', (yyvsp[(1) - (1)].string), HB_COMP_PARAM );
                                 HB_MACRO_CHECK( (yyval.asExpr) );
                              ;}
    break;

  case 24:
#line 347 "macro.y"
    {  HB_BOOL fNewString;
                                 char * szVarName = hb_macroTextSymbol( (yyvsp[(1) - (1)].string), strlen( (yyvsp[(1) - (1)].string) ), &fNewString );
                                 if( szVarName )
                                 {
                                    if( fNewString )
                                       hb_macroIdentNew( HB_COMP_PARAM, szVarName );
                                    (yyval.asExpr) = hb_compExprNewVar( szVarName, HB_COMP_PARAM );
                                    HB_MACRO_CHECK( (yyval.asExpr) );
                                 }
                                 else
                                 {
                                    /* invalid variable name
                                     */
                                    HB_TRACE(HB_TR_DEBUG, ("macro -> invalid variable name: %s", (yyvsp[(1) - (1)].string)));
                                    YYABORT;
                                 }
                              ;}
    break;

  case 25:
#line 366 "macro.y"
    { hb_compExprMacroAsAlias( (yyvsp[(1) - (2)].asExpr) ); ;}
    break;

  case 26:
#line 371 "macro.y"
    { (yyval.asExpr) = hb_compExprNewMacro( (yyvsp[(2) - (2)].asExpr), 0, NULL, HB_COMP_PARAM ); ;}
    break;

  case 28:
#line 381 "macro.y"
    { (yyval.asExpr) = hb_compExprNewAlias( "FIELD", HB_COMP_PARAM ); ;}
    break;

  case 29:
#line 382 "macro.y"
    { (yyval.asExpr) = (yyvsp[(3) - (3)].asExpr); ;}
    break;

  case 30:
#line 387 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 31:
#line 388 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 32:
#line 389 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 33:
#line 390 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 34:
#line 391 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 35:
#line 394 "macro.y"
    { (yyval.asExpr) = hb_compExprNewVar( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 38:
#line 399 "macro.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 39:
#line 400 "macro.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 40:
#line 401 "macro.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 41:
#line 402 "macro.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 42:
#line 403 "macro.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 43:
#line 404 "macro.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 44:
#line 405 "macro.y"
    { (yyval.asExpr) = hb_compExprNewAliasVar( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 45:
#line 414 "macro.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 46:
#line 415 "macro.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 47:
#line 416 "macro.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 48:
#line 417 "macro.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 49:
#line 418 "macro.y"
    { (yyval.asExpr) = hb_compExprNewAliasExpr( (yyvsp[(1) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 50:
#line 423 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 51:
#line 424 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 52:
#line 425 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 53:
#line 426 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 54:
#line 427 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 55:
#line 428 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 56:
#line 429 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 57:
#line 430 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 58:
#line 431 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 59:
#line 432 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 60:
#line 433 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 61:
#line 434 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 62:
#line 435 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 63:
#line 436 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 64:
#line 437 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 65:
#line 438 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 66:
#line 439 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 67:
#line 440 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 68:
#line 441 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 69:
#line 446 "macro.y"
    { (yyval.asExpr) = hb_macroExprNewFunCall( hb_compExprNewFunName( (yyvsp[(1) - (4)].string), HB_COMP_PARAM ), (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM );
                                            HB_MACRO_CHECK( (yyval.asExpr) );
                                          ;}
    break;

  case 70:
#line 449 "macro.y"
    { (yyval.asExpr) = hb_macroExprNewFunCall( (yyvsp[(1) - (4)].asExpr), (yyvsp[(3) - (4)].asExpr), HB_COMP_PARAM );
                                            HB_MACRO_CHECK( (yyval.asExpr) );
                                          ;}
    break;

  case 71:
#line 454 "macro.y"
    {  if( hb_compExprParamListLen( (yyvsp[(4) - (5)].asExpr) ) != 0 )
                                                {
                                                   hb_macroError( EG_SYNTAX, HB_COMP_PARAM );
                                                   YYABORT;
                                                }
                                                else
                                                   (yyval.asExpr) = hb_compExprNewFunRef( (yyvsp[(2) - (5)].string), HB_COMP_PARAM );
                                             ;}
    break;

  case 72:
#line 464 "macro.y"
    { (yyval.asExpr) = hb_compExprNewArgList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 73:
#line 465 "macro.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 76:
#line 472 "macro.y"
    { (yyval.asExpr) = hb_compExprNewVarRef( (yyvsp[(2) - (2)].string), HB_COMP_PARAM ); ;}
    break;

  case 77:
#line 473 "macro.y"
    { (yyval.asExpr) = hb_compExprNewRef( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 78:
#line 474 "macro.y"
    { (yyval.asExpr) = hb_compExprNewRef( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 79:
#line 475 "macro.y"
    { (yyval.asExpr) = hb_compExprNewRef( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 80:
#line 476 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); (yyval.asExpr)->value.asList.reference = HB_TRUE; ;}
    break;

  case 81:
#line 479 "macro.y"
    { (yyval.asExpr) = hb_compExprNewArgRef( HB_COMP_PARAM ); ;}
    break;

  case 83:
#line 485 "macro.y"
    { (yyval.asExpr) = hb_compExprNewMethodObject( (yyvsp[(3) - (3)].asExpr), (yyvsp[(1) - (3)].asExpr) ); ;}
    break;

  case 84:
#line 488 "macro.y"
    { (yyval.asExpr) = hb_compExprNewSend( (yyvsp[(1) - (1)].string), HB_COMP_PARAM ); ;}
    break;

  case 85:
#line 489 "macro.y"
    { (yyval.asExpr) = hb_compExprNewMacroSend( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 86:
#line 490 "macro.y"
    { (yyval.asExpr) = hb_compExprNewMacroSend( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 87:
#line 495 "macro.y"
    { (yyval.asExpr) = hb_compExprNewMethodCall( (yyvsp[(1) - (4)].asExpr), (yyvsp[(3) - (4)].asExpr) ); ;}
    break;

  case 110:
#line 521 "macro.y"
    { HB_MACRO_IFENABLED( (yyval.asExpr), (yyvsp[(1) - (1)].asExpr), HB_SM_HARBOUR ); ;}
    break;

  case 111:
#line 522 "macro.y"
    { HB_MACRO_IFENABLED( (yyval.asExpr), (yyvsp[(1) - (1)].asExpr), HB_SM_HARBOUR ); ;}
    break;

  case 112:
#line 523 "macro.y"
    { HB_MACRO_IFENABLED( (yyval.asExpr), (yyvsp[(1) - (1)].asExpr), HB_SM_HARBOUR ); ;}
    break;

  case 118:
#line 531 "macro.y"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); HB_MACRO_CHECK( (yyval.asExpr) ); ;}
    break;

  case 119:
#line 532 "macro.y"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr); HB_MACRO_CHECK( (yyval.asExpr) ); ;}
    break;

  case 120:
#line 535 "macro.y"
    { (yyval.asExpr) = hb_compExprNewArgRef( HB_COMP_PARAM ); ;}
    break;

  case 122:
#line 539 "macro.y"
    {
                                       if( !(HB_MACRO_DATA->Flags & HB_MACRO_GEN_LIST) )
                                       {
                                          HB_TRACE(HB_TR_DEBUG, ("macro -> invalid expression: %s", HB_MACRO_DATA->string));
                                          hb_macroError( EG_SYNTAX, HB_COMP_PARAM );
                                          YYABORT;
                                       }
                                    ;}
    break;

  case 123:
#line 547 "macro.y"
    {
                                       HB_MACRO_DATA->uiListElements = 1;
                                       (yyval.asExpr) = hb_compExprAddListExpr( ( HB_MACRO_DATA->Flags & HB_MACRO_GEN_PARE ) ? hb_compExprNewList( (yyvsp[(1) - (4)].asExpr), HB_COMP_PARAM ) : hb_compExprNewArgList( (yyvsp[(1) - (4)].asExpr), HB_COMP_PARAM ), (yyvsp[(4) - (4)].asExpr) );
                                    ;}
    break;

  case 125:
#line 554 "macro.y"
    { HB_MACRO_DATA->uiListElements++;
                                                  (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 126:
#line 558 "macro.y"
    { (yyval.asExpr) = hb_compExprNewEmpty( HB_COMP_PARAM ); ;}
    break;

  case 148:
#line 582 "macro.y"
    { HB_MACRO_IFENABLED( (yyval.asExpr), (yyvsp[(1) - (1)].asExpr), HB_SM_HARBOUR ); ;}
    break;

  case 150:
#line 589 "macro.y"
    { (yyval.asExpr) = hb_compExprNewPostInc( (yyvsp[(0) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 151:
#line 590 "macro.y"
    { (yyval.asExpr) = hb_compExprNewPostDec( (yyvsp[(0) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 152:
#line 596 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 153:
#line 599 "macro.y"
    { (yyval.asExpr) = hb_compExprNewPreInc( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 154:
#line 600 "macro.y"
    { (yyval.asExpr) = hb_compExprNewPreDec( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 155:
#line 603 "macro.y"
    { (yyval.asExpr) = hb_compExprNewNot( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 156:
#line 604 "macro.y"
    { (yyval.asExpr) = hb_compExprNewNegate( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 157:
#line 605 "macro.y"
    { (yyval.asExpr) = (yyvsp[(2) - (2)].asExpr); ;}
    break;

  case 158:
#line 608 "macro.y"
    { (yyval.asExpr) = hb_compExprAssign( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 159:
#line 611 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlusEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 160:
#line 614 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinusEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 161:
#line 617 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMultEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 162:
#line 620 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDivEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 163:
#line 623 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewModEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 164:
#line 626 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewExpEq( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 171:
#line 637 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPlus( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 172:
#line 638 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMinus( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 173:
#line 639 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMult( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 174:
#line 640 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewDiv( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 175:
#line 641 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewMod( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 176:
#line 642 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewPower( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 177:
#line 645 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewAnd( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 178:
#line 646 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewOr( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 179:
#line 649 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewEQ( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 180:
#line 650 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewLT( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 181:
#line 651 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewGT( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 182:
#line 652 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewLE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 183:
#line 653 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewGE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 184:
#line 654 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewNE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 185:
#line 655 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewNE( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 186:
#line 656 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewIN( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 187:
#line 657 "macro.y"
    { (yyval.asExpr) = hb_compExprSetOperand( hb_compExprNewEqual( (yyvsp[(1) - (3)].asExpr), HB_COMP_PARAM ), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 189:
#line 666 "macro.y"
    { (yyval.asExpr) = hb_macroExprNewArrayAt( (yyvsp[(0) - (2)].asExpr), (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 190:
#line 667 "macro.y"
    { (yyval.asExpr) = hb_macroExprNewArrayAt( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 191:
#line 668 "macro.y"
    { (yyval.asExpr) = hb_macroExprNewArrayAt( (yyvsp[(1) - (4)].asExpr), (yyvsp[(4) - (4)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 192:
#line 671 "macro.y"
    { (yyval.asExpr) = hb_compExprNewList( (yyvsp[(1) - (1)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 193:
#line 672 "macro.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 194:
#line 676 "macro.y"
    { (yyval.asExpr) = hb_compExprNewCodeBlock( NULL, 0, 0, HB_COMP_PARAM ); ;}
    break;

  case 195:
#line 678 "macro.y"
    { (yyval.asExpr) = (yyvsp[(3) - (7)].asExpr); ;}
    break;

  case 196:
#line 683 "macro.y"
    { (yyval.asExpr) = hb_compExprAddCodeblockExpr( (yyvsp[(-2) - (1)].asExpr), (yyvsp[(1) - (1)].asExpr) ); ;}
    break;

  case 197:
#line 684 "macro.y"
    { (yyval.asExpr) = hb_compExprAddCodeblockExpr( (yyvsp[(-2) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 198:
#line 689 "macro.y"
    { (yyval.asExpr) = NULL; ;}
    break;

  case 199:
#line 690 "macro.y"
    { (yyval.asExpr) = NULL; (yyvsp[(0) - (1)].asExpr)->value.asCodeblock.flags |= HB_BLOCK_VPARAMS; ;}
    break;

  case 200:
#line 691 "macro.y"
    { (yyval.asExpr) = (yyvsp[(1) - (1)].asExpr);   ;}
    break;

  case 201:
#line 692 "macro.y"
    { (yyval.asExpr) = (yyvsp[(1) - (3)].asExpr);   (yyvsp[(0) - (3)].asExpr)->value.asCodeblock.flags |= HB_BLOCK_VPARAMS; ;}
    break;

  case 202:
#line 695 "macro.y"
    { (yyval.asExpr) = hb_compExprCBVarAdd( (yyvsp[(0) - (1)].asExpr), (yyvsp[(1) - (1)].string), ' ', HB_COMP_PARAM ); ;}
    break;

  case 203:
#line 696 "macro.y"
    { (yyval.asExpr) = hb_compExprCBVarAdd( (yyvsp[(0) - (3)].asExpr), (yyvsp[(3) - (3)].string), ' ', HB_COMP_PARAM ); HB_MACRO_CHECK( (yyval.asExpr) ); ;}
    break;

  case 204:
#line 699 "macro.y"
    { (yyval.asExpr) = hb_compExprNewList( (yyvsp[(2) - (2)].asExpr), HB_COMP_PARAM ); ;}
    break;

  case 205:
#line 700 "macro.y"
    { (yyval.asExpr) = hb_compExprAddListExpr( (yyvsp[(1) - (3)].asExpr), (yyvsp[(3) - (3)].asExpr) ); ;}
    break;

  case 208:
#line 711 "macro.y"
    { (yyval.asExpr) = hb_compExprNewIIF( hb_compExprAddListExpr( hb_compExprAddListExpr( hb_compExprNewList( (yyvsp[(3) - (8)].asExpr), HB_COMP_PARAM ), (yyvsp[(5) - (8)].asExpr) ), (yyvsp[(7) - (8)].asExpr) ) ); ;}
    break;


/* Line 1269 of yacc.c.  */
#line 2840 "macroy.c"
      default: break;
    }
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;


  /* Now `shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*------------------------------------.
| yyerrlab -- here on detecting error |
`------------------------------------*/
yyerrlab:
  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
      YYUSE (yynerrs);
#if ! YYERROR_VERBOSE
      yyerror (pMacro, YY_("syntax error"));
#else
      {
	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
	  {
	    YYSIZE_T yyalloc = 2 * yysize;
	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
	    if (yymsg != yymsgbuf)
	      YYSTACK_FREE (yymsg);
	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
	    if (yymsg)
	      yymsg_alloc = yyalloc;
	    else
	      {
		yymsg = yymsgbuf;
		yymsg_alloc = sizeof yymsgbuf;
	      }
	  }

	if (0 < yysize && yysize <= yymsg_alloc)
	  {
	    (void) yysyntax_error (yymsg, yystate, yychar);
	    yyerror (pMacro, yymsg);
	  }
	else
	  {
	    yyerror (pMacro, YY_("syntax error"));
	    if (yysize != 0)
	      goto yyexhaustedlab;
	  }
      }
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse look-ahead token after an
	 error, discard it.  */

      if (yychar <= YYEOF)
	{
	  /* Return failure if at end of input.  */
	  if (yychar == YYEOF)
	    YYABORT;
	}
      else
	{
	  yydestruct ("Error: discarding",
		      yytoken, &yylval, pMacro);
	  yychar = YYEMPTY;
	}
    }

  /* Else will try to reuse look-ahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
#ifndef NO_YYERROR
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
#if ! defined( __BORLANDC__ ) && ! defined( __WATCOMC__ )
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;
#endif

  /* Do not reclaim the symbols of the rule which action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;
#endif /* NO_YYERROR */


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;	/* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (yyn != YYPACT_NINF)
	{
	  yyn += YYTERROR;
	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
	    {
	      yyn = yytable[yyn];
	      if (0 < yyn)
		break;
	    }
	}

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
	YYABORT;


      yydestruct ("Error: popping",
		  yystos[yystate], yyvsp, pMacro);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  if (yyn == YYFINAL)
    YYACCEPT;

  *++yyvsp = yylval;


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#ifndef yyoverflow
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (pMacro, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEOF && yychar != YYEMPTY)
     yydestruct ("Cleanup: discarding lookahead",
		 yytoken, &yylval, pMacro);
  /* Do not reclaim the symbols of the rule which action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
		  yystos[*yyssp], yyvsp, pMacro);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  /* Make sure YYID is used.  */
  return YYID (yyresult);
}


#line 714 "macro.y"



/*
 ** ------------------------------------------------------------------------ **
 */

void yyerror( HB_MACRO_PTR pMacro, const char * s )
{
   HB_SYMBOL_UNUSED( pMacro );
   HB_SYMBOL_UNUSED( s );
}

/* ************************************************************************* */

#define HB_MEXPR_PREALLOC 8

typedef struct HB_MEXPR_
{
   int      count;
   HB_EXPR  Expressions[ HB_MEXPR_PREALLOC ];
   struct HB_MEXPR_ *pPrev;
}
HB_MEXPR, * HB_MEXPR_PTR;

typedef struct HB_MIDENT_
{
   char * Identifier;
   struct HB_MIDENT_ *pPrev;
}
HB_MIDENT, * HB_MIDENT_PTR;

/* Allocates memory for Expression holder structure and stores it
 * on the linked list
*/
static HB_EXPR_PTR hb_macroExprAlloc( HB_COMP_DECL )
{
   HB_MEXPR_PTR pMExpr = ( HB_MEXPR_PTR ) HB_MACRO_DATA->pExprLst;

   if( !pMExpr || pMExpr->count >= HB_MEXPR_PREALLOC )
   {
      pMExpr = ( HB_MEXPR_PTR ) hb_xgrab( sizeof( HB_MEXPR ) );
      pMExpr->pPrev = ( HB_MEXPR_PTR ) HB_MACRO_DATA->pExprLst;
      pMExpr->count = 0;
      HB_MACRO_DATA->pExprLst = ( void * ) pMExpr;
   }
   return &pMExpr->Expressions[ pMExpr->count++ ];
}

char * hb_macroIdentNew( HB_COMP_DECL, char * szIdent )
{
   HB_MIDENT_PTR pMIdent = ( HB_MIDENT_PTR ) hb_xgrab( sizeof( HB_MIDENT ) );
   pMIdent->Identifier = szIdent;
   pMIdent->pPrev = ( HB_MIDENT_PTR ) HB_MACRO_DATA->pIdentLst;
   HB_MACRO_DATA->pIdentLst = ( void * ) pMIdent;

   return szIdent;
}

static HB_EXPR_PTR hb_macroExprNew( HB_COMP_DECL, HB_EXPRTYPE iType )
{
   HB_EXPR_PTR pExpr;

   HB_TRACE(HB_TR_DEBUG, ("hb_macroExprNew(%p,%i)", HB_COMP_PARAM, iType));

   pExpr = hb_macroExprAlloc( HB_COMP_PARAM );
   pExpr->ExprType = iType;
   pExpr->pNext    = NULL;
   pExpr->ValType  = HB_EV_UNKNOWN;

   return pExpr;
}

/* Delete self - all components will be deleted somewhere else
 */
static void hb_macroExprClear( HB_COMP_DECL, HB_EXPR_PTR pExpr )
{
   HB_SYMBOL_UNUSED( HB_COMP_PARAM );

   pExpr->ExprType = HB_ET_NONE;
}

/* Delete all components and delete self
 */
static void hb_macroExprFree( HB_COMP_DECL, HB_EXPR_PTR pExpr )
{
   HB_TRACE(HB_TR_DEBUG, ("hb_macroExprFree()"));

   HB_EXPR_USE( pExpr, HB_EA_DELETE );
   pExpr->ExprType = HB_ET_NONE;
}

/* Deallocate all memory used by expression optimizer */
static void hb_macroLstFree( HB_MACRO_PTR pMacro )
{
   if( pMacro->pExprLst )
   {
      HB_MEXPR_PTR pMExpr = ( HB_MEXPR_PTR ) pMacro->pExprLst;
      do
      {
         while( pMExpr->count )
            hb_macroExprFree( pMacro, &pMExpr->Expressions[ --pMExpr->count ] );
         pMExpr = pMExpr->pPrev;
      }
      while( pMExpr );
      do
      {
         pMExpr = ( HB_MEXPR_PTR ) pMacro->pExprLst;
         pMacro->pExprLst = ( void * ) pMExpr->pPrev;
         hb_xfree( pMExpr );
      }
      while( pMacro->pExprLst );
   }

   while( pMacro->pIdentLst )
   {
      HB_MIDENT_PTR pMIdent = ( HB_MIDENT_PTR ) HB_MACRO_DATA->pIdentLst;
      HB_MACRO_DATA->pIdentLst = ( void * ) pMIdent->pPrev;
      hb_xfree( pMIdent->Identifier );
      hb_xfree( pMIdent );
   }
}

static HB_EXPR_PTR hb_macroErrorType( HB_COMP_DECL, HB_EXPR_PTR pExpr )
{
   hb_macroError( EG_ARG, HB_COMP_PARAM );
   return pExpr;
}

static HB_EXPR_PTR hb_macroErrorSyntax( HB_COMP_DECL, HB_EXPR_PTR pExpr )
{
   hb_macroError( EG_SYNTAX, HB_COMP_PARAM );
   return pExpr;
}

static void hb_macroErrorDuplVar( HB_COMP_DECL, const char * szVarName )
{
   HB_SYMBOL_UNUSED( szVarName );
   hb_macroError( EG_SYNTAX, HB_COMP_PARAM );
}


static const HB_COMP_FUNCS s_macro_funcs =
{
   hb_macroExprNew,
   hb_macroExprClear,
   hb_macroExprFree,

   hb_macroErrorType,
   hb_macroErrorSyntax,
   hb_macroErrorDuplVar,
};

int hb_macroYYParse( HB_MACRO_PTR pMacro )
{
   int iResult;

   pMacro->funcs = &s_macro_funcs;

   if( hb_macroLexNew( pMacro ) )
   {
      pMacro->status = HB_MACRO_CONT;
      pMacro->pExprLst = NULL;
      pMacro->pIdentLst = NULL;

      iResult = yyparse( pMacro );

      hb_macroLstFree( pMacro );
      hb_macroLexDelete( pMacro );
   }
   else
      iResult = HB_MACRO_FAILURE;

   return iResult;
}


#if defined( HB_MACRO_PPLEX )

/* it's an example of PP token translator which change tokens generated by
   PP into terminal symbols used by our grammar parser generated by Bison */
HB_BOOL hb_macroLexNew( HB_MACRO_PTR pMacro )
{
   pMacro->pLex = ( void * ) hb_pp_lexNew( pMacro->string, pMacro->length );
   return pMacro->pLex != NULL;
}

void hb_macroLexDelete( HB_MACRO_PTR pMacro )
{
   if( pMacro->pLex )
   {
      hb_pp_free( ( PHB_PP_STATE ) pMacro->pLex );
      pMacro->pLex = NULL;
   }
}

int hb_macro_yylex( YYSTYPE *yylval_ptr, HB_MACRO_PTR pMacro )
{
   PHB_PP_TOKEN pToken = hb_pp_lexGet( ( PHB_PP_STATE ) pMacro->pLex );

   if( !pToken )
      return 0;

   switch( HB_PP_TOKEN_TYPE( pToken->type ) )
   {
      case HB_PP_TOKEN_KEYWORD:
         if( pToken->len >= 4 && pToken->len <= 6 && pToken->pNext &&
             HB_PP_TOKEN_TYPE( pToken->pNext->type ) == HB_PP_TOKEN_ALIAS &&
             ( hb_strnicmp( "_FIELD", pToken->value, pToken->len ) == 0 ||
               hb_strnicmp( "FIELD", pToken->value, pToken->len ) == 0 ) )
         {
            return FIELD;
         }
         else if( pToken->len == 3 && pToken->pNext &&
                  HB_PP_TOKEN_TYPE( pToken->pNext->type ) == HB_PP_TOKEN_LEFT_PB &&
                  hb_stricmp( "IIF", pToken->value ) == 0 )
         {
            return IIF;
         }
         else if( pToken->len == 2 && pToken->pNext &&
                  HB_PP_TOKEN_TYPE( pToken->pNext->type ) == HB_PP_TOKEN_LEFT_PB &&
                  hb_stricmp( "IF", pToken->value ) == 0 )
            return IIF;
         else if( pToken->len == 3 && hb_stricmp( "NIL", pToken->value ) == 0 )
            return NIL;

         hb_pp_tokenUpper( pToken );
         yylval_ptr->string = pToken->value;
         return IDENTIFIER;

      case HB_PP_TOKEN_MACROVAR:
         hb_pp_tokenUpper( pToken );
         yylval_ptr->string = pToken->value;
         return MACROVAR;

      case HB_PP_TOKEN_MACROTEXT:
         hb_pp_tokenUpper( pToken );
         yylval_ptr->string = pToken->value;
         return MACROTEXT;

      case HB_PP_TOKEN_NUMBER:
      {
         HB_MAXINT lNumber;
         double dNumber;
         int iDec, iWidth;

         if( hb_compStrToNum( pToken->value, pToken->len, &lNumber, &dNumber, &iDec, &iWidth ) )
         {
            yylval_ptr->valDouble.dNumber = dNumber;
            yylval_ptr->valDouble.bDec    = ( HB_UCHAR ) iDec;
            yylval_ptr->valDouble.bWidth  = ( HB_UCHAR ) iWidth;
            return NUM_DOUBLE;
         }
         else
         {
            yylval_ptr->valLong.lNumber = lNumber;
            yylval_ptr->valLong.bWidth  = ( HB_UCHAR ) iWidth;
            return NUM_LONG;
         }
      }
      case HB_PP_TOKEN_DATE:
         if( pToken->len == 10 )
         {
            int year, month, day;
            hb_dateStrGet( pToken->value + 2, &year, &month, &day );
            yylval_ptr->valLong.lNumber = hb_dateEncode( year, month, day );
         }
         else
            yylval_ptr->valLong.lNumber = 0;
         return NUM_DATE;

      case HB_PP_TOKEN_TIMESTAMP:
         if( !hb_timeStampStrGetDT( pToken->value,
                                    &yylval_ptr->valTimeStamp.date,
                                    &yylval_ptr->valTimeStamp.time ) )
         {
            hb_macroError( EG_SYNTAX, pMacro );
         }
         return TIMESTAMP;

      case HB_PP_TOKEN_STRING:
         yylval_ptr->valChar.string = pToken->value;
         yylval_ptr->valChar.length = pToken->len;
         return LITERAL;

      case HB_PP_TOKEN_LOGICAL:
         return pToken->value[ 1 ] == 'T' ? TRUEVALUE : FALSEVALUE;

      case HB_PP_TOKEN_HASH:
      case HB_PP_TOKEN_DIRECTIVE:
         return NE1;

      case HB_PP_TOKEN_NE:
         return NE2;

      case HB_PP_TOKEN_ASSIGN:
         return INASSIGN;

      case HB_PP_TOKEN_EQUAL:
         return EQ;

      case HB_PP_TOKEN_INC:
         return INC;

      case HB_PP_TOKEN_DEC:
         return DEC;

      case HB_PP_TOKEN_ALIAS:
         return ALIASOP;

      case HB_PP_TOKEN_LE:
         return LE;

      case HB_PP_TOKEN_GE:
         return GE;

      case HB_PP_TOKEN_PLUSEQ:
         return PLUSEQ;

      case HB_PP_TOKEN_MINUSEQ:
         return MINUSEQ;

      case HB_PP_TOKEN_MULTEQ:
         return MULTEQ;

      case HB_PP_TOKEN_DIVEQ:
         return DIVEQ;

      case HB_PP_TOKEN_MODEQ:
         return MODEQ;

      case HB_PP_TOKEN_EXPEQ:
         return EXPEQ;

      case HB_PP_TOKEN_POWER:
         return POWER;

      case HB_PP_TOKEN_AND:
         return AND;

      case HB_PP_TOKEN_OR:
         return OR;

      case HB_PP_TOKEN_NOT:
         return NOT;

      default:
         return pToken->value[ 0 ];
   }
}

#endif /* HB_MACRO_PPLEX */
